/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DashFunction, Setting, Type } from "./types/types";
import { RouterHistory } from "@stencil/router";
export namespace Components {
    interface DashjsApiControl {
    }
    interface DashjsApiControlElement {
        "name": string;
        "param": any;
        "paramDesc": any;
    }
    interface DashjsApiControlModal {
        "functionList": DashFunction[];
        "selectedFunctions": Map<string, any>;
    }
    interface DashjsPlayer {
        "streamUrl": string;
        "url": string;
    }
    interface DashjsPopoverSelect {
        "options": [];
    }
    interface DashjsReferenceUi {
        "url": string;
    }
    interface DashjsSettingsControl {
        "history": RouterHistory;
        "resetSettings": () => Promise<void>;
    }
    interface DashjsSettingsControlElement {
        "defaultValue": any;
        "name": string;
        "options": string[];
        "type": Type;
    }
    interface DashjsSettingsControlModal {
        "selectedSettings": Map<string, any>;
        "settingsList": Setting[];
    }
    interface DashjsStatistics {
        "audio_data": any;
        "videoInstance": any;
        "video_data": any;
    }
}
declare global {
    interface HTMLDashjsApiControlElement extends Components.DashjsApiControl, HTMLStencilElement {
    }
    var HTMLDashjsApiControlElement: {
        prototype: HTMLDashjsApiControlElement;
        new (): HTMLDashjsApiControlElement;
    };
    interface HTMLDashjsApiControlElementElement extends Components.DashjsApiControlElement, HTMLStencilElement {
    }
    var HTMLDashjsApiControlElementElement: {
        prototype: HTMLDashjsApiControlElementElement;
        new (): HTMLDashjsApiControlElementElement;
    };
    interface HTMLDashjsApiControlModalElement extends Components.DashjsApiControlModal, HTMLStencilElement {
    }
    var HTMLDashjsApiControlModalElement: {
        prototype: HTMLDashjsApiControlModalElement;
        new (): HTMLDashjsApiControlModalElement;
    };
    interface HTMLDashjsPlayerElement extends Components.DashjsPlayer, HTMLStencilElement {
    }
    var HTMLDashjsPlayerElement: {
        prototype: HTMLDashjsPlayerElement;
        new (): HTMLDashjsPlayerElement;
    };
    interface HTMLDashjsPopoverSelectElement extends Components.DashjsPopoverSelect, HTMLStencilElement {
    }
    var HTMLDashjsPopoverSelectElement: {
        prototype: HTMLDashjsPopoverSelectElement;
        new (): HTMLDashjsPopoverSelectElement;
    };
    interface HTMLDashjsReferenceUiElement extends Components.DashjsReferenceUi, HTMLStencilElement {
    }
    var HTMLDashjsReferenceUiElement: {
        prototype: HTMLDashjsReferenceUiElement;
        new (): HTMLDashjsReferenceUiElement;
    };
    interface HTMLDashjsSettingsControlElement extends Components.DashjsSettingsControl, HTMLStencilElement {
    }
    var HTMLDashjsSettingsControlElement: {
        prototype: HTMLDashjsSettingsControlElement;
        new (): HTMLDashjsSettingsControlElement;
    };
    interface HTMLDashjsSettingsControlElementElement extends Components.DashjsSettingsControlElement, HTMLStencilElement {
    }
    var HTMLDashjsSettingsControlElementElement: {
        prototype: HTMLDashjsSettingsControlElementElement;
        new (): HTMLDashjsSettingsControlElementElement;
    };
    interface HTMLDashjsSettingsControlModalElement extends Components.DashjsSettingsControlModal, HTMLStencilElement {
    }
    var HTMLDashjsSettingsControlModalElement: {
        prototype: HTMLDashjsSettingsControlModalElement;
        new (): HTMLDashjsSettingsControlModalElement;
    };
    interface HTMLDashjsStatisticsElement extends Components.DashjsStatistics, HTMLStencilElement {
    }
    var HTMLDashjsStatisticsElement: {
        prototype: HTMLDashjsStatisticsElement;
        new (): HTMLDashjsStatisticsElement;
    };
    interface HTMLElementTagNameMap {
        "dashjs-api-control": HTMLDashjsApiControlElement;
        "dashjs-api-control-element": HTMLDashjsApiControlElementElement;
        "dashjs-api-control-modal": HTMLDashjsApiControlModalElement;
        "dashjs-player": HTMLDashjsPlayerElement;
        "dashjs-popover-select": HTMLDashjsPopoverSelectElement;
        "dashjs-reference-ui": HTMLDashjsReferenceUiElement;
        "dashjs-settings-control": HTMLDashjsSettingsControlElement;
        "dashjs-settings-control-element": HTMLDashjsSettingsControlElementElement;
        "dashjs-settings-control-modal": HTMLDashjsSettingsControlModalElement;
        "dashjs-statistics": HTMLDashjsStatisticsElement;
    }
}
declare namespace LocalJSX {
    interface DashjsApiControl {
        "onPlayerEvent"?: (event: CustomEvent<String>) => void;
    }
    interface DashjsApiControlElement {
        "name"?: string;
        "onValueChanged"?: (event: CustomEvent<any>) => void;
        "param"?: any;
        "paramDesc"?: any;
    }
    interface DashjsApiControlModal {
        "functionList"?: DashFunction[];
        "selectedFunctions"?: Map<string, any>;
    }
    interface DashjsPlayer {
        "onStreamMetricsEvent"?: (event: CustomEvent<Object>) => void;
        "streamUrl"?: string;
        "url"?: string;
    }
    interface DashjsPopoverSelect {
        "options"?: [];
    }
    interface DashjsReferenceUi {
        "url"?: string;
    }
    interface DashjsSettingsControl {
        "history"?: RouterHistory;
        "onSettingsUpdated"?: (event: CustomEvent<Object>) => void;
    }
    interface DashjsSettingsControlElement {
        "defaultValue"?: any;
        "name"?: string;
        "onValueChanged"?: (event: CustomEvent<any>) => void;
        "options"?: string[];
        "type"?: Type;
    }
    interface DashjsSettingsControlModal {
        "selectedSettings"?: Map<string, any>;
        "settingsList"?: Setting[];
    }
    interface DashjsStatistics {
        "audio_data"?: any;
        "videoInstance"?: any;
        "video_data"?: any;
    }
    interface IntrinsicElements {
        "dashjs-api-control": DashjsApiControl;
        "dashjs-api-control-element": DashjsApiControlElement;
        "dashjs-api-control-modal": DashjsApiControlModal;
        "dashjs-player": DashjsPlayer;
        "dashjs-popover-select": DashjsPopoverSelect;
        "dashjs-reference-ui": DashjsReferenceUi;
        "dashjs-settings-control": DashjsSettingsControl;
        "dashjs-settings-control-element": DashjsSettingsControlElement;
        "dashjs-settings-control-modal": DashjsSettingsControlModal;
        "dashjs-statistics": DashjsStatistics;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dashjs-api-control": LocalJSX.DashjsApiControl & JSXBase.HTMLAttributes<HTMLDashjsApiControlElement>;
            "dashjs-api-control-element": LocalJSX.DashjsApiControlElement & JSXBase.HTMLAttributes<HTMLDashjsApiControlElementElement>;
            "dashjs-api-control-modal": LocalJSX.DashjsApiControlModal & JSXBase.HTMLAttributes<HTMLDashjsApiControlModalElement>;
            "dashjs-player": LocalJSX.DashjsPlayer & JSXBase.HTMLAttributes<HTMLDashjsPlayerElement>;
            "dashjs-popover-select": LocalJSX.DashjsPopoverSelect & JSXBase.HTMLAttributes<HTMLDashjsPopoverSelectElement>;
            "dashjs-reference-ui": LocalJSX.DashjsReferenceUi & JSXBase.HTMLAttributes<HTMLDashjsReferenceUiElement>;
            "dashjs-settings-control": LocalJSX.DashjsSettingsControl & JSXBase.HTMLAttributes<HTMLDashjsSettingsControlElement>;
            "dashjs-settings-control-element": LocalJSX.DashjsSettingsControlElement & JSXBase.HTMLAttributes<HTMLDashjsSettingsControlElementElement>;
            "dashjs-settings-control-modal": LocalJSX.DashjsSettingsControlModal & JSXBase.HTMLAttributes<HTMLDashjsSettingsControlModalElement>;
            "dashjs-statistics": LocalJSX.DashjsStatistics & JSXBase.HTMLAttributes<HTMLDashjsStatisticsElement>;
        }
    }
}
