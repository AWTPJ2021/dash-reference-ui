/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DashFunction, Setting, SettingsMap, SettingsMapValue, Tree, Type } from "./types/types";
import { MediaPlayerSettingClass } from "dashjs";
export namespace Components {
    interface DashjsApiControl {
        "version": string;
    }
    interface DashjsApiControlElement {
        /**
          * The displayed name of the control element.
         */
        "name": string;
        "options": string[];
        "param": any;
        "paramDesc": any;
        "type": Type;
    }
    interface DashjsApiControlModal {
        "functionList": DashFunction[];
        "selectedFunctions": Map<string, any>;
    }
    interface DashjsApiLinkSelector {
        "sourceList": any[];
    }
    interface DashjsGenericModal {
        /**
          * Content displayed inside the modal, can be text or an HTMLElement
         */
        "content": HTMLElement | string;
        /**
          * Title displayed on Top of the Modal
         */
        "textTitle": string;
    }
    interface DashjsHelpButton {
        /**
          * Informational text displayed in the Modal for help.
         */
        "helperText": string;
        /**
          * title displayed on top of the Modal.
         */
        "titleText": string | undefined;
    }
    interface DashjsInputSearch {
        /**
          * Function applied before display of the Search Item
         */
        "displayFunction": (str: string) => string;
        /**
          * Placholder of the input element
         */
        "placeholder": string;
        /**
          * List of searched Items, single one will be emitted if selected during search
         */
        "searchItemList": string[];
    }
    interface DashjsPlayer {
        /**
          * The Settings of dashjs that should be used. e.g. v3.2.0
         */
        "settings": MediaPlayerSettingClass;
        /**
          * Request Video to be played in Picture in Picture Mode
         */
        "showPiP": () => Promise<void>;
        /**
          * The Type of dashjs that should be loaded. e.g. debug or min
         */
        "type": string;
        /**
          * The Version of dashjs that should be loaded. e.g. v3.2.0
         */
        "version": string;
    }
    interface DashjsPopoverSelect {
        "options": string[];
    }
    interface DashjsReferenceUi {
    }
    interface DashjsSettingsControl {
        /**
          * Resets the internal Settings
         */
        "resetSettings": () => Promise<void>;
        /**
          * The version of which the settings should be loaded.
         */
        "version": string | undefined;
    }
    interface DashjsSettingsControlElement {
        /**
          * The default value of the Setting
         */
        "defaultValue": SettingsMapValue;
        /**
          * Displayed name of the Setting
         */
        "name": string;
        /**
          * A Select with the specified options will be displayed if supplied.
         */
        "options": string[];
        /**
          * Optional: Labels that are displayed intead of the options value. Labels are displayed in the same order as options.
         */
        "optionsLabels": string[] | undefined;
        /**
          * The Type of the Settings Control which should be displayed, e.g. 'number'
         */
        "type": Type;
    }
    interface DashjsSettingsControlModal {
        "selectedSettings": SettingsMap;
        "settingsList": Setting[];
        "settingsTree": Tree | undefined;
    }
    interface DashjsStatistics {
    }
    interface DashjsTree {
        /**
          * All Elements (for data access)
         */
        "elements": string[];
        /**
          * States the current path for orientation
         */
        "path": string[];
        /**
          * Functions which renders the elements of this node
         */
        "renderFunc": (key: string) => void;
        /**
          * Function which state whether the element has a suffix
         */
        "renderFuncSuffix": () => void;
        /**
          * Functions which renders the the title of this node
         */
        "renderFuncTitle": (path) => void;
        /**
          * Fill if this is the root of the Tree
         */
        "root": boolean;
        /**
          * The Tree Element which is the current root.
         */
        "tree": Tree;
    }
    interface IonAccordion {
        /**
          * Set the expansion State
         */
        "setExpandState": (state: boolean) => Promise<void>;
        /**
          * The Title of the accordion. Can be left blank.
         */
        "titleText": string;
    }
}
declare global {
    interface HTMLDashjsApiControlElement extends Components.DashjsApiControl, HTMLStencilElement {
    }
    var HTMLDashjsApiControlElement: {
        prototype: HTMLDashjsApiControlElement;
        new (): HTMLDashjsApiControlElement;
    };
    interface HTMLDashjsApiControlElementElement extends Components.DashjsApiControlElement, HTMLStencilElement {
    }
    var HTMLDashjsApiControlElementElement: {
        prototype: HTMLDashjsApiControlElementElement;
        new (): HTMLDashjsApiControlElementElement;
    };
    interface HTMLDashjsApiControlModalElement extends Components.DashjsApiControlModal, HTMLStencilElement {
    }
    var HTMLDashjsApiControlModalElement: {
        prototype: HTMLDashjsApiControlModalElement;
        new (): HTMLDashjsApiControlModalElement;
    };
    interface HTMLDashjsApiLinkSelectorElement extends Components.DashjsApiLinkSelector, HTMLStencilElement {
    }
    var HTMLDashjsApiLinkSelectorElement: {
        prototype: HTMLDashjsApiLinkSelectorElement;
        new (): HTMLDashjsApiLinkSelectorElement;
    };
    interface HTMLDashjsGenericModalElement extends Components.DashjsGenericModal, HTMLStencilElement {
    }
    var HTMLDashjsGenericModalElement: {
        prototype: HTMLDashjsGenericModalElement;
        new (): HTMLDashjsGenericModalElement;
    };
    interface HTMLDashjsHelpButtonElement extends Components.DashjsHelpButton, HTMLStencilElement {
    }
    var HTMLDashjsHelpButtonElement: {
        prototype: HTMLDashjsHelpButtonElement;
        new (): HTMLDashjsHelpButtonElement;
    };
    interface HTMLDashjsInputSearchElement extends Components.DashjsInputSearch, HTMLStencilElement {
    }
    var HTMLDashjsInputSearchElement: {
        prototype: HTMLDashjsInputSearchElement;
        new (): HTMLDashjsInputSearchElement;
    };
    interface HTMLDashjsPlayerElement extends Components.DashjsPlayer, HTMLStencilElement {
    }
    var HTMLDashjsPlayerElement: {
        prototype: HTMLDashjsPlayerElement;
        new (): HTMLDashjsPlayerElement;
    };
    interface HTMLDashjsPopoverSelectElement extends Components.DashjsPopoverSelect, HTMLStencilElement {
    }
    var HTMLDashjsPopoverSelectElement: {
        prototype: HTMLDashjsPopoverSelectElement;
        new (): HTMLDashjsPopoverSelectElement;
    };
    interface HTMLDashjsReferenceUiElement extends Components.DashjsReferenceUi, HTMLStencilElement {
    }
    var HTMLDashjsReferenceUiElement: {
        prototype: HTMLDashjsReferenceUiElement;
        new (): HTMLDashjsReferenceUiElement;
    };
    interface HTMLDashjsSettingsControlElement extends Components.DashjsSettingsControl, HTMLStencilElement {
    }
    var HTMLDashjsSettingsControlElement: {
        prototype: HTMLDashjsSettingsControlElement;
        new (): HTMLDashjsSettingsControlElement;
    };
    interface HTMLDashjsSettingsControlElementElement extends Components.DashjsSettingsControlElement, HTMLStencilElement {
    }
    var HTMLDashjsSettingsControlElementElement: {
        prototype: HTMLDashjsSettingsControlElementElement;
        new (): HTMLDashjsSettingsControlElementElement;
    };
    interface HTMLDashjsSettingsControlModalElement extends Components.DashjsSettingsControlModal, HTMLStencilElement {
    }
    var HTMLDashjsSettingsControlModalElement: {
        prototype: HTMLDashjsSettingsControlModalElement;
        new (): HTMLDashjsSettingsControlModalElement;
    };
    interface HTMLDashjsStatisticsElement extends Components.DashjsStatistics, HTMLStencilElement {
    }
    var HTMLDashjsStatisticsElement: {
        prototype: HTMLDashjsStatisticsElement;
        new (): HTMLDashjsStatisticsElement;
    };
    interface HTMLDashjsTreeElement extends Components.DashjsTree, HTMLStencilElement {
    }
    var HTMLDashjsTreeElement: {
        prototype: HTMLDashjsTreeElement;
        new (): HTMLDashjsTreeElement;
    };
    interface HTMLIonAccordionElement extends Components.IonAccordion, HTMLStencilElement {
    }
    var HTMLIonAccordionElement: {
        prototype: HTMLIonAccordionElement;
        new (): HTMLIonAccordionElement;
    };
    interface HTMLElementTagNameMap {
        "dashjs-api-control": HTMLDashjsApiControlElement;
        "dashjs-api-control-element": HTMLDashjsApiControlElementElement;
        "dashjs-api-control-modal": HTMLDashjsApiControlModalElement;
        "dashjs-api-link-selector": HTMLDashjsApiLinkSelectorElement;
        "dashjs-generic-modal": HTMLDashjsGenericModalElement;
        "dashjs-help-button": HTMLDashjsHelpButtonElement;
        "dashjs-input-search": HTMLDashjsInputSearchElement;
        "dashjs-player": HTMLDashjsPlayerElement;
        "dashjs-popover-select": HTMLDashjsPopoverSelectElement;
        "dashjs-reference-ui": HTMLDashjsReferenceUiElement;
        "dashjs-settings-control": HTMLDashjsSettingsControlElement;
        "dashjs-settings-control-element": HTMLDashjsSettingsControlElementElement;
        "dashjs-settings-control-modal": HTMLDashjsSettingsControlModalElement;
        "dashjs-statistics": HTMLDashjsStatisticsElement;
        "dashjs-tree": HTMLDashjsTreeElement;
        "ion-accordion": HTMLIonAccordionElement;
    }
}
declare namespace LocalJSX {
    interface DashjsApiControl {
        "onPlayerEvent"?: (event: CustomEvent<string>) => void;
        "version"?: string;
    }
    interface DashjsApiControlElement {
        /**
          * The displayed name of the control element.
         */
        "name"?: string;
        "onValueChanged"?: (event: CustomEvent<any>) => void;
        "options"?: string[];
        "param"?: any;
        "paramDesc"?: any;
        "type"?: Type;
    }
    interface DashjsApiControlModal {
        "functionList"?: DashFunction[];
        "selectedFunctions"?: Map<string, any>;
    }
    interface DashjsApiLinkSelector {
        "onSetStream"?: (event: CustomEvent<string>) => void;
        "sourceList"?: any[];
    }
    interface DashjsGenericModal {
        /**
          * Content displayed inside the modal, can be text or an HTMLElement
         */
        "content"?: HTMLElement | string;
        /**
          * Title displayed on Top of the Modal
         */
        "textTitle"?: string;
    }
    interface DashjsHelpButton {
        /**
          * Informational text displayed in the Modal for help.
         */
        "helperText"?: string;
        /**
          * title displayed on top of the Modal.
         */
        "titleText"?: string | undefined;
    }
    interface DashjsInputSearch {
        /**
          * Function applied before display of the Search Item
         */
        "displayFunction"?: (str: string) => string;
        /**
          * Search Item that was selected during the search.
         */
        "onSearchItemSelected"?: (event: CustomEvent<string>) => void;
        /**
          * Placholder of the input element
         */
        "placeholder"?: string;
        /**
          * List of searched Items, single one will be emitted if selected during search
         */
        "searchItemList"?: string[];
    }
    interface DashjsPlayer {
        /**
          * Stream metrics: dashMetrcis & dashAdapter calculations
         */
        "onMetricsEvent"?: (event: CustomEvent<string>) => void;
        /**
          * Player response: player api calls repsonse
         */
        "onPlayerResponse"?: (event: CustomEvent<any>) => void;
        /**
          * The Settings of dashjs that should be used. e.g. v3.2.0
         */
        "settings"?: MediaPlayerSettingClass;
        /**
          * The Type of dashjs that should be loaded. e.g. debug or min
         */
        "type"?: string;
        /**
          * The Version of dashjs that should be loaded. e.g. v3.2.0
         */
        "version"?: string;
    }
    interface DashjsPopoverSelect {
        "options"?: string[];
    }
    interface DashjsReferenceUi {
    }
    interface DashjsSettingsControl {
        /**
          * Emitted everytime the Settings are updated
         */
        "onSettingsUpdated"?: (event: CustomEvent<MediaPlayerSettingClass>) => void;
        /**
          * The version of which the settings should be loaded.
         */
        "version"?: string | undefined;
    }
    interface DashjsSettingsControlElement {
        /**
          * The default value of the Setting
         */
        "defaultValue"?: SettingsMapValue;
        /**
          * Displayed name of the Setting
         */
        "name"?: string;
        /**
          * The value of the Settings wil be emitted if changed.
         */
        "onValueChanged"?: (event: CustomEvent<SettingsMapValue>) => void;
        /**
          * A Select with the specified options will be displayed if supplied.
         */
        "options"?: string[];
        /**
          * Optional: Labels that are displayed intead of the options value. Labels are displayed in the same order as options.
         */
        "optionsLabels"?: string[] | undefined;
        /**
          * The Type of the Settings Control which should be displayed, e.g. 'number'
         */
        "type"?: Type;
    }
    interface DashjsSettingsControlModal {
        "selectedSettings"?: SettingsMap;
        "settingsList"?: Setting[];
        "settingsTree"?: Tree | undefined;
    }
    interface DashjsStatistics {
    }
    interface DashjsTree {
        /**
          * All Elements (for data access)
         */
        "elements"?: string[];
        /**
          * States the current path for orientation
         */
        "path"?: string[];
        /**
          * Functions which renders the elements of this node
         */
        "renderFunc"?: (key: string) => void;
        /**
          * Function which state whether the element has a suffix
         */
        "renderFuncSuffix"?: () => void;
        /**
          * Functions which renders the the title of this node
         */
        "renderFuncTitle"?: (path) => void;
        /**
          * Fill if this is the root of the Tree
         */
        "root"?: boolean;
        /**
          * The Tree Element which is the current root.
         */
        "tree"?: Tree;
    }
    interface IonAccordion {
        /**
          * The Title of the accordion. Can be left blank.
         */
        "titleText"?: string;
    }
    interface IntrinsicElements {
        "dashjs-api-control": DashjsApiControl;
        "dashjs-api-control-element": DashjsApiControlElement;
        "dashjs-api-control-modal": DashjsApiControlModal;
        "dashjs-api-link-selector": DashjsApiLinkSelector;
        "dashjs-generic-modal": DashjsGenericModal;
        "dashjs-help-button": DashjsHelpButton;
        "dashjs-input-search": DashjsInputSearch;
        "dashjs-player": DashjsPlayer;
        "dashjs-popover-select": DashjsPopoverSelect;
        "dashjs-reference-ui": DashjsReferenceUi;
        "dashjs-settings-control": DashjsSettingsControl;
        "dashjs-settings-control-element": DashjsSettingsControlElement;
        "dashjs-settings-control-modal": DashjsSettingsControlModal;
        "dashjs-statistics": DashjsStatistics;
        "dashjs-tree": DashjsTree;
        "ion-accordion": IonAccordion;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dashjs-api-control": LocalJSX.DashjsApiControl & JSXBase.HTMLAttributes<HTMLDashjsApiControlElement>;
            "dashjs-api-control-element": LocalJSX.DashjsApiControlElement & JSXBase.HTMLAttributes<HTMLDashjsApiControlElementElement>;
            "dashjs-api-control-modal": LocalJSX.DashjsApiControlModal & JSXBase.HTMLAttributes<HTMLDashjsApiControlModalElement>;
            "dashjs-api-link-selector": LocalJSX.DashjsApiLinkSelector & JSXBase.HTMLAttributes<HTMLDashjsApiLinkSelectorElement>;
            "dashjs-generic-modal": LocalJSX.DashjsGenericModal & JSXBase.HTMLAttributes<HTMLDashjsGenericModalElement>;
            "dashjs-help-button": LocalJSX.DashjsHelpButton & JSXBase.HTMLAttributes<HTMLDashjsHelpButtonElement>;
            "dashjs-input-search": LocalJSX.DashjsInputSearch & JSXBase.HTMLAttributes<HTMLDashjsInputSearchElement>;
            "dashjs-player": LocalJSX.DashjsPlayer & JSXBase.HTMLAttributes<HTMLDashjsPlayerElement>;
            "dashjs-popover-select": LocalJSX.DashjsPopoverSelect & JSXBase.HTMLAttributes<HTMLDashjsPopoverSelectElement>;
            "dashjs-reference-ui": LocalJSX.DashjsReferenceUi & JSXBase.HTMLAttributes<HTMLDashjsReferenceUiElement>;
            "dashjs-settings-control": LocalJSX.DashjsSettingsControl & JSXBase.HTMLAttributes<HTMLDashjsSettingsControlElement>;
            "dashjs-settings-control-element": LocalJSX.DashjsSettingsControlElement & JSXBase.HTMLAttributes<HTMLDashjsSettingsControlElementElement>;
            "dashjs-settings-control-modal": LocalJSX.DashjsSettingsControlModal & JSXBase.HTMLAttributes<HTMLDashjsSettingsControlModalElement>;
            "dashjs-statistics": LocalJSX.DashjsStatistics & JSXBase.HTMLAttributes<HTMLDashjsStatisticsElement>;
            "dashjs-tree": LocalJSX.DashjsTree & JSXBase.HTMLAttributes<HTMLDashjsTreeElement>;
            "ion-accordion": LocalJSX.IonAccordion & JSXBase.HTMLAttributes<HTMLIonAccordionElement>;
        }
    }
}
