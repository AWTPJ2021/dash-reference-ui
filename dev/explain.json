[
  {
    "comment": "/**\n * The media types\n * @typedef {(\"video\" | \"audio\" | \"text\" | \"fragmentedText\" | \"embeddedText\" | \"image\")} MediaType\n */",
    "meta": {
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 78,
      "columnno": 0,
      "path": "/tmp",
      "code": {}
    },
    "description": "The media types",
    "kind": "typedef",
    "name": "MediaType",
    "type": {
      "names": [
        "\"video\"",
        "\"audio\"",
        "\"text\"",
        "\"fragmentedText\"",
        "\"embeddedText\"",
        "\"image\""
      ]
    },
    "longname": "MediaType",
    "scope": "global"
  },
  {
    "comment": "/**\n * @module MediaPlayer\n * @description The MediaPlayer is the primary dash.js Module and a Facade to build your player around.\n * It will allow you access to all the important dash.js properties/methods via the public API and all the\n * events to build a robust DASH media player.\n */",
    "meta": {
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 84,
      "columnno": 0,
      "path": "/tmp",
      "code": {}
    },
    "kind": "module",
    "name": "MediaPlayer",
    "description": "The MediaPlayer is the primary dash.js Module and a Facade to build your player around.\nIt will allow you access to all the important dash.js properties/methods via the public API and all the\nevents to build a robust DASH media player.",
    "longname": "module:MediaPlayer"
  },
  {
    "comment": "/**\n   * @constant {string} STREAMING_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized\n   * @inner\n   */",
    "meta": {
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 91,
      "columnno": 2,
      "path": "/tmp",
      "code": {}
    },
    "kind": "constant",
    "name": "STREAMING_NOT_INITIALIZED_ERROR",
    "type": {
      "names": [
        "string"
      ]
    },
    "description": "error string thrown when a function is called before the dash.js has been fully initialized",
    "scope": "inner",
    "longname": "module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR",
    "memberof": "module:MediaPlayer"
  },
  {
    "comment": "/**\n   * @constant {string} PLAYBACK_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized\n   * @inner\n   */",
    "meta": {
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 96,
      "columnno": 2,
      "path": "/tmp",
      "code": {}
    },
    "kind": "constant",
    "name": "PLAYBACK_NOT_INITIALIZED_ERROR",
    "type": {
      "names": [
        "string"
      ]
    },
    "description": "error string thrown when a function is called before the dash.js has been fully initialized",
    "scope": "inner",
    "longname": "module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR",
    "memberof": "module:MediaPlayer"
  },
  {
    "comment": "/**\n   * @constant {string} ELEMENT_NOT_ATTACHED_ERROR error string thrown when a function is called before the dash.js has received a reference of an HTML5 video element\n   * @inner\n   */",
    "meta": {
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 101,
      "columnno": 2,
      "path": "/tmp",
      "code": {}
    },
    "kind": "constant",
    "name": "ELEMENT_NOT_ATTACHED_ERROR",
    "type": {
      "names": [
        "string"
      ]
    },
    "description": "error string thrown when a function is called before the dash.js has received a reference of an HTML5 video element",
    "scope": "inner",
    "longname": "module:MediaPlayer~ELEMENT_NOT_ATTACHED_ERROR",
    "memberof": "module:MediaPlayer"
  },
  {
    "comment": "/**\n   * @constant {string} SOURCE_NOT_ATTACHED_ERROR error string thrown when a function is called before the dash.js has received a valid source stream.\n   * @inner\n   */",
    "meta": {
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 106,
      "columnno": 2,
      "path": "/tmp",
      "code": {}
    },
    "kind": "constant",
    "name": "SOURCE_NOT_ATTACHED_ERROR",
    "type": {
      "names": [
        "string"
      ]
    },
    "description": "error string thrown when a function is called before the dash.js has received a valid source stream.",
    "scope": "inner",
    "longname": "module:MediaPlayer~SOURCE_NOT_ATTACHED_ERROR",
    "memberof": "module:MediaPlayer"
  },
  {
    "comment": "/**\n   * @constant {string} MEDIA_PLAYER_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized.\n   * @inner\n   */",
    "meta": {
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 111,
      "columnno": 2,
      "path": "/tmp",
      "code": {}
    },
    "kind": "constant",
    "name": "MEDIA_PLAYER_NOT_INITIALIZED_ERROR",
    "type": {
      "names": [
        "string"
      ]
    },
    "description": "error string thrown when a function is called before the dash.js has been fully initialized.",
    "scope": "inner",
    "longname": "module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR",
    "memberof": "module:MediaPlayer"
  },
  {
    "comment": "/**\n   * Configure media player with customs controllers. Helpful for tests\n   *\n   * @param {object=} config controllers configuration\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        7837,
        8685
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 186,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100000378",
        "name": "setConfig",
        "type": "FunctionDeclaration",
        "paramnames": [
          "config"
        ]
      },
      "vars": {
        "capabilities": "module:MediaPlayer~capabilities",
        "streamController": "module:MediaPlayer~streamController",
        "gapController": "module:MediaPlayer~gapController",
        "playbackController": "module:MediaPlayer~playbackController",
        "mediaPlayerModel": "module:MediaPlayer~mediaPlayerModel",
        "abrController": "module:MediaPlayer~abrController",
        "schemeLoaderFactory": "module:MediaPlayer~schemeLoaderFactory",
        "mediaController": "module:MediaPlayer~mediaController",
        "settings": "module:MediaPlayer~settings"
      }
    },
    "description": "Configure media player with customs controllers. Helpful for tests",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "controllers configuration",
        "name": "config"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "setConfig",
    "longname": "module:MediaPlayer#setConfig",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Upon creating the MediaPlayer you must call initialize before you call anything else.\n   * There is one exception to this rule. It is crucial to call {@link module:MediaPlayer#extend extend()}\n   * with all your extensions prior to calling initialize.\n   *\n   * ALL arguments are optional and there are individual methods to set each argument later on.\n   * The args in this method are just for convenience and should only be used for a simple player setup.\n   *\n   * @param {HTML5MediaElement=} view - Optional arg to set the video element. {@link module:MediaPlayer#attachView attachView()}\n   * @param {string=} source - Optional arg to set the media source. {@link module:MediaPlayer#attachSource attachSource()}\n   * @param {boolean=} AutoPlay - Optional arg to set auto play. {@link module:MediaPlayer#setAutoPlay setAutoPlay()}\n   * @see {@link module:MediaPlayer#attachView attachView()}\n   * @see {@link module:MediaPlayer#attachSource attachSource()}\n   * @see {@link module:MediaPlayer#setAutoPlay setAutoPlay()}\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        9779,
        12725
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 236,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100000486",
        "name": "initialize",
        "type": "FunctionDeclaration",
        "paramnames": [
          "view",
          "source",
          "AutoPlay"
        ]
      },
      "vars": {
        "capabilities": "module:MediaPlayer~capabilities",
        "errHandler": "module:MediaPlayer~errHandler",
        "mediaPlayerInitialized": "module:MediaPlayer~mediaPlayerInitialized",
        "timelineConverter": "module:MediaPlayer~timelineConverter",
        "abrController": "module:MediaPlayer~abrController",
        "schemeLoaderFactory": "module:MediaPlayer~schemeLoaderFactory",
        "playbackController": "module:MediaPlayer~playbackController",
        "mediaController": "module:MediaPlayer~mediaController",
        "streamController": "module:MediaPlayer~streamController",
        "gapController": "module:MediaPlayer~gapController",
        "adapter": "module:MediaPlayer~adapter",
        "manifestModel": "module:MediaPlayer~manifestModel",
        "cmcdModel": "module:MediaPlayer~cmcdModel",
        "dashMetrics": "module:MediaPlayer~dashMetrics",
        "textController": "module:MediaPlayer~textController",
        "domStorage": "module:MediaPlayer~domStorage",
        "baseURLController": "module:MediaPlayer~baseURLController",
        "segmentBaseController": "module:MediaPlayer~segmentBaseController"
      }
    },
    "description": "Upon creating the MediaPlayer you must call initialize before you call anything else.\nThere is one exception to this rule. It is crucial to call {@link module:MediaPlayer#extend extend()}\nwith all your extensions prior to calling initialize.\n\nALL arguments are optional and there are individual methods to set each argument later on.\nThe args in this method are just for convenience and should only be used for a simple player setup.",
    "params": [
      {
        "type": {
          "names": [
            "HTML5MediaElement"
          ]
        },
        "optional": true,
        "description": "Optional arg to set the video element. {@link module:MediaPlayer#attachView attachView()}",
        "name": "view"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Optional arg to set the media source. {@link module:MediaPlayer#attachSource attachSource()}",
        "name": "source"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Optional arg to set auto play. {@link module:MediaPlayer#setAutoPlay setAutoPlay()}",
        "name": "AutoPlay"
      }
    ],
    "see": [
      "{@link module:MediaPlayer#attachView attachView()}",
      "{@link module:MediaPlayer#attachSource attachSource()}",
      "{@link module:MediaPlayer#setAutoPlay setAutoPlay()}"
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "initialize",
    "longname": "module:MediaPlayer#initialize",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Sets the MPD source and the video element to null. You can also reset the MediaPlayer by\n   * calling attachSource with a new source file.\n   *\n   * This call does not destroy the MediaPlayer. To destroy the MediaPlayer and free all of its\n   * memory, call destroy().\n   *\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        13069,
        13560
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 356,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100000829",
        "name": "reset",
        "type": "FunctionDeclaration",
        "paramnames": []
      },
      "vars": {
        "protectionData": "module:MediaPlayer~protectionData",
        "protectionController": "module:MediaPlayer~protectionController",
        "metricsReportingController": "module:MediaPlayer~metricsReportingController",
        "offlineController": "module:MediaPlayer~offlineController"
      }
    },
    "description": "Sets the MPD source and the video element to null. You can also reset the MediaPlayer by\ncalling attachSource with a new source file.\n\nThis call does not destroy the MediaPlayer. To destroy the MediaPlayer and free all of its\nmemory, call destroy().",
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "reset",
    "longname": "module:MediaPlayer#reset",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Completely destroys the media player and frees all memory.\n   *\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        13694,
        13783
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 385,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100000890",
        "name": "destroy",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Completely destroys the media player and frees all memory.",
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "destroy",
    "longname": "module:MediaPlayer#destroy",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * The ready state of the MediaPlayer based on both the video element and MPD source being defined.\n   *\n   * @returns {boolean} The current ready state of the MediaPlayer\n   * @see {@link module:MediaPlayer#attachView attachView()}\n   * @see {@link module:MediaPlayer#attachSource attachSource()}\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        14148,
        14222
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 399,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100000902",
        "name": "isReady",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "The ready state of the MediaPlayer based on both the video element and MPD source being defined.",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "The current ready state of the MediaPlayer"
      }
    ],
    "see": [
      "{@link module:MediaPlayer#attachView attachView()}",
      "{@link module:MediaPlayer#attachSource attachSource()}"
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "isReady",
    "longname": "module:MediaPlayer#isReady",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Use the on method to listen for public events found in MediaPlayer.events. {@link MediaPlayerEvents}\n   *\n   * @param {string} type - {@link MediaPlayerEvents}\n   * @param {Function} listener - callback method when the event fires.\n   * @param {Object} scope - context of the listener so it can be removed properly.\n   * @param {Object} options - object to define various options such as priority and mode\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        14698,
        14796
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 413,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100000916",
        "name": "on",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type",
          "listener",
          "scope",
          "options"
        ]
      }
    },
    "description": "Use the on method to listen for public events found in MediaPlayer.events. {@link MediaPlayerEvents}",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "{@link MediaPlayerEvents}",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "callback method when the event fires.",
        "name": "listener"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "context of the listener so it can be removed properly.",
        "name": "scope"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object to define various options such as priority and mode",
        "name": "options"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "on",
    "longname": "module:MediaPlayer#on",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Use the off method to remove listeners for public events found in MediaPlayer.events. {@link MediaPlayerEvents}\n   *\n   * @param {string} type - {@link MediaPlayerEvents}\n   * @param {Function} listener - callback method when the event fires.\n   * @param {Object} scope - context of the listener so it can be removed properly.\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        15193,
        15275
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 426,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100000932",
        "name": "off",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type",
          "listener",
          "scope"
        ]
      }
    },
    "description": "Use the off method to remove listeners for public events found in MediaPlayer.events. {@link MediaPlayerEvents}",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "{@link MediaPlayerEvents}",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "callback method when the event fires.",
        "name": "listener"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "context of the listener so it can be removed properly.",
        "name": "scope"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "off",
    "longname": "module:MediaPlayer#off",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Current version of Dash.js\n   * @returns {string} the current dash.js version string.\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        15431,
        15489
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 436,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100000946",
        "name": "getVersion",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Current version of Dash.js",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the current dash.js version string."
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getVersion",
    "longname": "module:MediaPlayer#getVersion",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Use this method to access the dash.js logging class.\n   *\n   * @returns {Debug}\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        15639,
        15682
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 447,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100000952",
        "name": "getDebug",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Use this method to access the dash.js logging class.",
    "returns": [
      {
        "type": {
          "names": [
            "Debug"
          ]
        }
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getDebug",
    "longname": "module:MediaPlayer#getDebug",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Causes the player to begin streaming the media as set by the {@link module:MediaPlayer#attachSource attachSource()}\n   * method in preparation for playing. It specifically does not require a view to be attached with {@link module:MediaPlayer#attachSource attachView()} to begin preloading.\n   * When a view is attached after preloading, the buffered data is transferred to the attached mediaSource buffers.\n   *\n   * @see {@link module:MediaPlayer#attachSource attachSource()}\n   * @see {@link module:MediaPlayer#attachView attachView()}\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~SOURCE_NOT_ATTACHED_ERROR SOURCE_NOT_ATTACHED_ERROR} if called before attachSource function\n   * @instance\n   */",
    "meta": {
      "range": [
        16623,
        16836
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 470,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100000957",
        "name": "preload",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Causes the player to begin streaming the media as set by the {@link module:MediaPlayer#attachSource attachSource()}\nmethod in preparation for playing. It specifically does not require a view to be attached with {@link module:MediaPlayer#attachSource attachView()} to begin preloading.\nWhen a view is attached after preloading, the buffered data is transferred to the attached mediaSource buffers.",
    "see": [
      "{@link module:MediaPlayer#attachSource attachSource()}",
      "{@link module:MediaPlayer#attachView attachView()}"
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~SOURCE_NOT_ATTACHED_ERROR SOURCE_NOT_ATTACHED_ERROR} if called before attachSource function"
      }
    ],
    "scope": "instance",
    "name": "preload",
    "longname": "module:MediaPlayer#preload",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * The play method initiates playback of the media defined by the {@link module:MediaPlayer#attachSource attachSource()} method.\n   * This method will call play on the native Video Element.\n   *\n   * @see {@link module:MediaPlayer#attachSource attachSource()}\n   * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        17310,
        17512
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 490,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100000979",
        "name": "play",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "The play method initiates playback of the media defined by the {@link module:MediaPlayer#attachSource attachSource()} method.\nThis method will call play on the native Video Element.",
    "see": [
      "{@link module:MediaPlayer#attachSource attachSource()}"
    ],
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "play",
    "longname": "module:MediaPlayer#play",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * This method will call pause on the native Video Element.\n   *\n   * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        17791,
        17927
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 506,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001002",
        "name": "pause",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "This method will call pause on the native Video Element.",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "pause",
    "longname": "module:MediaPlayer#pause",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Returns a Boolean that indicates whether the Video Element is paused.\n   * @return {boolean}\n   * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        18237,
        18386
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 520,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001016",
        "name": "isPaused",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Returns a Boolean that indicates whether the Video Element is paused.",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        }
      }
    ],
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "isPaused",
    "longname": "module:MediaPlayer#isPaused",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Sets the currentTime property of the attached video element.  If it is a live stream with a\n   * timeShiftBufferLength, then the DVR window offset will be automatically calculated.\n   *\n   * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected\n   * @see {@link module:MediaPlayer#getDVRSeekOffset getDVRSeekOffset()}\n   * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type or is NaN.\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        19151,
        19488
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 538,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001030",
        "name": "seek",
        "type": "FunctionDeclaration",
        "paramnames": [
          "value"
        ]
      },
      "vars": {
        "s": "module:MediaPlayer#seek~s"
      }
    },
    "description": "Sets the currentTime property of the attached video element.  If it is a live stream with a\ntimeShiftBufferLength, then the DVR window offset will be automatically calculated.",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected",
        "name": "value"
      }
    ],
    "see": [
      "{@link module:MediaPlayer#getDVRSeekOffset getDVRSeekOffset()}"
    ],
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      },
      {
        "description": "{@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type or is NaN."
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "seek",
    "longname": "module:MediaPlayer#seek",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Returns a Boolean that indicates whether the media is in the process of seeking to a new position.\n   * @return {boolean}\n   * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        19827,
        19978
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 560,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001072",
        "name": "isSeeking",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Returns a Boolean that indicates whether the media is in the process of seeking to a new position.",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        }
      }
    ],
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "isSeeking",
    "longname": "module:MediaPlayer#isSeeking",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Returns a Boolean that indicates whether the media is in the process of dynamic.\n   * @return {boolean}\n   * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        20299,
        20453
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 574,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001086",
        "name": "isDynamic",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Returns a Boolean that indicates whether the media is in the process of dynamic.",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        }
      }
    ],
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "isDynamic",
    "longname": "module:MediaPlayer#isDynamic",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Use this method to set the native Video Element's playback rate.\n   * @param {number} value\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        20615,
        20696
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 587,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001100",
        "name": "setPlaybackRate",
        "type": "FunctionDeclaration",
        "paramnames": [
          "value"
        ]
      },
      "vars": {
        ".playbackRate": "module:MediaPlayer.playbackRate"
      }
    },
    "description": "Use this method to set the native Video Element's playback rate.",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "name": "value"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "setPlaybackRate",
    "longname": "module:MediaPlayer#setPlaybackRate",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Returns the current playback rate.\n   * @returns {number}\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        20824,
        20899
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 597,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001111",
        "name": "getPlaybackRate",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Returns the current playback rate.",
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        }
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getPlaybackRate",
    "longname": "module:MediaPlayer#getPlaybackRate",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Use this method to set the native Video Element's muted state. Takes a Boolean that determines whether audio is muted. true if the audio is muted and false otherwise.\n   * @param {boolean} value\n   * @memberof module:MediaPlayer\n   * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not boolean type.\n   * @instance\n   */",
    "meta": {
      "range": [
        21287,
        21395
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 608,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001119",
        "name": "setMute",
        "type": "FunctionDeclaration",
        "paramnames": [
          "value"
        ]
      },
      "vars": {
        ".muted": "module:MediaPlayer.muted"
      }
    },
    "description": "Use this method to set the native Video Element's muted state. Takes a Boolean that determines whether audio is muted. true if the audio is muted and false otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "name": "value"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not boolean type."
      }
    ],
    "scope": "instance",
    "name": "setMute",
    "longname": "module:MediaPlayer#setMute",
    "kind": "function"
  },
  {
    "comment": "/**\n   * A Boolean that determines whether audio is muted.\n   * @returns {boolean}\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        21539,
        21599
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 619,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001135",
        "name": "isMuted",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "A Boolean that determines whether audio is muted.",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        }
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "isMuted",
    "longname": "module:MediaPlayer#isMuted",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).\n   * @param {number} value\n   * @memberof module:MediaPlayer\n   * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type, or is NaN or not between 0 and 1.\n   * @instance\n   */",
    "meta": {
      "range": [
        21926,
        22126
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 630,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001143",
        "name": "setVolume",
        "type": "FunctionDeclaration",
        "paramnames": [
          "value"
        ]
      },
      "vars": {
        ".volume": "module:MediaPlayer.volume"
      }
    },
    "description": "A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "name": "value"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type, or is NaN or not between 0 and 1."
      }
    ],
    "scope": "instance",
    "name": "setVolume",
    "longname": "module:MediaPlayer#setVolume",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Returns the current audio volume, from 0.0 (silent) to 1.0 (loudest).\n   * @returns {number}\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        22289,
        22352
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 643,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001176",
        "name": "getVolume",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Returns the current audio volume, from 0.0 (silent) to 1.0 (loudest).",
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        }
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getVolume",
    "longname": "module:MediaPlayer#getVolume",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * The length of the buffer for a given media type, in seconds. Valid media\n   * types are \"video\", \"audio\" and \"fragmentedText\". If no type is passed\n   * in, then the minimum of video, audio and fragmentedText buffer length is\n   * returned. NaN is returned if an invalid type is requested, the\n   * presentation does not contain that type, or if no arguments are passed\n   * and the presentation does not include any adaption sets of valid media\n   * type.\n   *\n   * @param {MediaType} type - 'video', 'audio' or 'fragmentedText'\n   * @returns {number} The length of the buffer for the given media type, in\n   *  seconds, or NaN\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        23051,
        23681
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 662,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001184",
        "name": "getBufferLength",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type"
        ]
      },
      "vars": {
        "types": "module:MediaPlayer#getBufferLength~types",
        "buffer": "module:MediaPlayer#getBufferLength~buffer",
        "": null
      }
    },
    "description": "The length of the buffer for a given media type, in seconds. Valid media\ntypes are \"video\", \"audio\" and \"fragmentedText\". If no type is passed\nin, then the minimum of video, audio and fragmentedText buffer length is\nreturned. NaN is returned if an invalid type is requested, the\npresentation does not contain that type, or if no arguments are passed\nand the presentation does not include any adaption sets of valid media\ntype.",
    "params": [
      {
        "type": {
          "names": [
            "MediaType"
          ]
        },
        "description": "'video', 'audio' or 'fragmentedText'",
        "name": "type"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The length of the buffer for the given media type, in\n seconds, or NaN"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getBufferLength",
    "longname": "module:MediaPlayer#getBufferLength",
    "kind": "function"
  },
  {
    "comment": "/**\n   * The timeShiftBufferLength (DVR Window), in seconds.\n   *\n   * @returns {number} The window of allowable play time behind the live point of a live stream.\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        23905,
        24075
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 685,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001286",
        "name": "getDVRWindowSize",
        "type": "FunctionDeclaration",
        "paramnames": []
      },
      "vars": {
        "metric": "module:MediaPlayer#getDVRWindowSize~metric"
      }
    },
    "description": "The timeShiftBufferLength (DVR Window), in seconds.",
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The window of allowable play time behind the live point of a live stream."
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getDVRWindowSize",
    "longname": "module:MediaPlayer#getDVRWindowSize",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * This method should only be used with a live stream that has a valid timeShiftBufferLength (DVR Window).\n   * NOTE - If you do not need the raw offset value (i.e. media analytics, tracking, etc) consider using the {@link module:MediaPlayer#seek seek()} method\n   * which will calculate this value for you and set the video element's currentTime property all in one simple call.\n   *\n   * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected.\n   * @returns {number} A value that is relative the available range within the timeShiftBufferLength (DVR Window).\n   * @see {@link module:MediaPlayer#seek seek()}\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        24849,
        25189
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 704,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001308",
        "name": "getDVRSeekOffset",
        "type": "FunctionDeclaration",
        "paramnames": [
          "value"
        ]
      },
      "vars": {
        "metric": "module:MediaPlayer#getDVRSeekOffset~metric",
        "liveDelay": "module:MediaPlayer#getDVRSeekOffset~liveDelay",
        "val": "module:MediaPlayer~val"
      }
    },
    "description": "This method should only be used with a live stream that has a valid timeShiftBufferLength (DVR Window).\nNOTE - If you do not need the raw offset value (i.e. media analytics, tracking, etc) consider using the {@link module:MediaPlayer#seek seek()} method\nwhich will calculate this value for you and set the video element's currentTime property all in one simple call.",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected.",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A value that is relative the available range within the timeShiftBufferLength (DVR Window)."
      }
    ],
    "see": [
      "{@link module:MediaPlayer#seek seek()}"
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getDVRSeekOffset",
    "longname": "module:MediaPlayer#getDVRSeekOffset",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Current time of the playhead, in seconds.\n   *\n   * If called with no arguments then the returned time value is time elapsed since the start point of the first stream, or if it is a live stream, then the time will be based on the return value of the {@link module:MediaPlayer#duration duration()} method.\n   * However if a stream ID is supplied then time is relative to the start of that stream, or is null if there is no such stream id in the manifest.\n   *\n   * @param {string} streamId - The ID of a stream that the returned playhead time must be relative to the start of. If undefined, then playhead time is relative to the first stream.\n   * @returns {number} The current playhead time of the media, or null.\n   * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        26120,
        26580
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 733,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001365",
        "name": "time",
        "type": "FunctionDeclaration",
        "paramnames": [
          "streamId"
        ]
      },
      "vars": {
        "t": "module:MediaPlayer~t",
        "metric": "module:MediaPlayer#time~metric"
      }
    },
    "description": "Current time of the playhead, in seconds.\n\nIf called with no arguments then the returned time value is time elapsed since the start point of the first stream, or if it is a live stream, then the time will be based on the return value of the {@link module:MediaPlayer#duration duration()} method.\nHowever if a stream ID is supplied then time is relative to the start of that stream, or is null if there is no such stream id in the manifest.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of a stream that the returned playhead time must be relative to the start of. If undefined, then playhead time is relative to the first stream.",
        "name": "streamId"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The current playhead time of the media, or null."
      }
    ],
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "time",
    "longname": "module:MediaPlayer#time",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Duration of the media's playback, in seconds.\n   *\n   * @returns {number} The current duration of the media.\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @instance\n   */",
    "meta": {
      "range": [
        26906,
        27387
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 757,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001431",
        "name": "duration",
        "type": "FunctionDeclaration",
        "paramnames": []
      },
      "vars": {
        "d": "module:MediaPlayer~d",
        "metric": "module:MediaPlayer#duration~metric",
        "range": "module:MediaPlayer~range"
      }
    },
    "description": "Duration of the media's playback, in seconds.",
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The current duration of the media."
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "scope": "instance",
    "name": "duration",
    "longname": "module:MediaPlayer#duration",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Use this method to get the current playhead time as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.\n   * Note - this property only has meaning for live streams. If called before play() has begun, it will return a value of NaN.\n   *\n   * @returns {number} The current playhead time as UTC timestamp.\n   * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        27926,
        28109
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 786,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001502",
        "name": "timeAsUTC",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Use this method to get the current playhead time as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.\nNote - this property only has meaning for live streams. If called before play() has begun, it will return a value of NaN.",
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The current playhead time as UTC timestamp."
      }
    ],
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "timeAsUTC",
    "longname": "module:MediaPlayer#timeAsUTC",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Use this method to get the current duration as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.\n   * Note - this property only has meaning for live streams.\n   *\n   * @returns {number} The current duration as UTC timestamp.\n   * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        28572,
        28717
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 805,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001524",
        "name": "durationAsUTC",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Use this method to get the current duration as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.\nNote - this property only has meaning for live streams.",
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The current duration as UTC timestamp."
      }
    ],
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "durationAsUTC",
    "longname": "module:MediaPlayer#durationAsUTC",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Gets the top quality BitrateInfo checking portal limit and max allowed.\n   * It calls getTopQualityIndexFor internally\n   *\n   * @param {MediaType} type - 'video' or 'audio'\n   * @memberof module:MediaPlayer\n   * @returns {BitrateInfo | null}\n   * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @instance\n   */",
    "meta": {
      "range": [
        29340,
        29518
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 829,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001538",
        "name": "getTopBitrateInfoFor",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type"
        ]
      }
    },
    "description": "Gets the top quality BitrateInfo checking portal limit and max allowed.\nIt calls getTopQualityIndexFor internally",
    "params": [
      {
        "type": {
          "names": [
            "MediaType"
          ]
        },
        "description": "'video' or 'audio'",
        "name": "type"
      }
    ],
    "memberof": "module:MediaPlayer",
    "returns": [
      {
        "type": {
          "names": [
            "BitrateInfo",
            "null"
          ]
        }
      }
    ],
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "scope": "instance",
    "name": "getTopBitrateInfoFor",
    "longname": "module:MediaPlayer#getTopBitrateInfoFor",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Gets the current download quality for media type video, audio or images. For video and audio types the ABR\n   * rules update this value before every new download unless setAutoSwitchQualityFor(type, false) is called. For 'image'\n   * type, thumbnails, there is no ABR algorithm and quality is set manually.\n   *\n   * @param {MediaType} type - 'video', 'audio' or 'image' (thumbnails)\n   * @returns {number} the quality index, 0 corresponding to the lowest bitrate\n   * @memberof module:MediaPlayer\n   * @see {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}\n   * @see {@link module:MediaPlayer#setQualityFor setQualityFor()}\n   * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @instance\n   */",
    "meta": {
      "range": [
        30355,
        30820
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 849,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001554",
        "name": "getQualityFor",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type"
        ]
      },
      "vars": {
        "activeStream": "module:MediaPlayer#getQualityFor~activeStream",
        "thumbnailController": "module:MediaPlayer#getQualityFor~thumbnailController"
      }
    },
    "description": "Gets the current download quality for media type video, audio or images. For video and audio types the ABR\nrules update this value before every new download unless setAutoSwitchQualityFor(type, false) is called. For 'image'\ntype, thumbnails, there is no ABR algorithm and quality is set manually.",
    "params": [
      {
        "type": {
          "names": [
            "MediaType"
          ]
        },
        "description": "'video', 'audio' or 'image' (thumbnails)",
        "name": "type"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "the quality index, 0 corresponding to the lowest bitrate"
      }
    ],
    "memberof": "module:MediaPlayer",
    "see": [
      "{@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}",
      "{@link module:MediaPlayer#setQualityFor setQualityFor()}"
    ],
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "scope": "instance",
    "name": "getQualityFor",
    "longname": "module:MediaPlayer#getQualityFor",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Sets the current quality for media type instead of letting the ABR Heuristics automatically selecting it.\n   * This value will be overwritten by the ABR rules unless setAutoSwitchQualityFor(type, false) is called.\n   *\n   * @param {MediaType} type - 'video', 'audio' or 'image'\n   * @param {number} value - the quality index, 0 corresponding to the lowest bitrate\n   * @memberof module:MediaPlayer\n   * @see {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}\n   * @see {@link module:MediaPlayer#getQualityFor getQualityFor()}\n   * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @instance\n   */",
    "meta": {
      "range": [
        31557,
        32078
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 877,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001606",
        "name": "setQualityFor",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type",
          "value"
        ]
      },
      "vars": {
        "activeStream": "module:MediaPlayer#setQualityFor~activeStream",
        "thumbnailController": "module:MediaPlayer#setQualityFor~thumbnailController"
      }
    },
    "description": "Sets the current quality for media type instead of letting the ABR Heuristics automatically selecting it.\nThis value will be overwritten by the ABR rules unless setAutoSwitchQualityFor(type, false) is called.",
    "params": [
      {
        "type": {
          "names": [
            "MediaType"
          ]
        },
        "description": "'video', 'audio' or 'image'",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "the quality index, 0 corresponding to the lowest bitrate",
        "name": "value"
      }
    ],
    "memberof": "module:MediaPlayer",
    "see": [
      "{@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}",
      "{@link module:MediaPlayer#getQualityFor getQualityFor()}"
    ],
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "scope": "instance",
    "name": "setQualityFor",
    "longname": "module:MediaPlayer#setQualityFor",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Update the video element size variables\n   * Should be called on window resize (or any other time player is resized). Fullscreen does trigger a window resize event.\n   *\n   * Once windowResizeEventCalled = true, abrController.checkPortalSize() will use element size variables rather than querying clientWidth every time.\n   *\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        32474,
        32595
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 903,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001661",
        "name": "updatePortalSize",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Update the video element size variables\nShould be called on window resize (or any other time player is resized). Fullscreen does trigger a window resize event.\n\nOnce windowResizeEventCalled = true, abrController.checkPortalSize() will use element size variables rather than querying clientWidth every time.",
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "updatePortalSize",
    "longname": "module:MediaPlayer#updatePortalSize",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * <p>Set to false to prevent stream from auto-playing when the view is attached.</p>\n   *\n   * @param {boolean} value\n   * @default true\n   * @memberof module:MediaPlayer\n   * @see {@link module:MediaPlayer#attachView attachView()}\n   * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not boolean type.\n   * @instance\n   *\n   */",
    "meta": {
      "range": [
        33198,
        33295
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 926,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001675",
        "name": "setAutoPlay",
        "type": "FunctionDeclaration",
        "paramnames": [
          "value"
        ]
      },
      "vars": {
        "autoPlay": "module:MediaPlayer~autoPlay"
      }
    },
    "description": "<p>Set to false to prevent stream from auto-playing when the view is attached.</p>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "name": "value"
      }
    ],
    "defaultvalue": "true",
    "memberof": "module:MediaPlayer",
    "see": [
      "{@link module:MediaPlayer#attachView attachView()}"
    ],
    "exceptions": [
      {
        "description": "{@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not boolean type."
      }
    ],
    "scope": "instance",
    "name": "setAutoPlay",
    "longname": "module:MediaPlayer#setAutoPlay",
    "kind": "function"
  },
  {
    "comment": "/**\n   * @returns {boolean} The current autoPlay state.\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        33412,
        33461
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 936,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001688",
        "name": "getAutoPlay",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "The current autoPlay state."
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getAutoPlay",
    "longname": "module:MediaPlayer#getAutoPlay",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * @memberof module:MediaPlayer\n   * @instance\n   * @returns {number|NaN} Current live stream latency in seconds. It is the difference between current time and time position at the playback head.\n   * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n   */",
    "meta": {
      "range": [
        33822,
        34062
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 946,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001693",
        "name": "getCurrentLiveLatency",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "number",
            "NaN"
          ]
        },
        "description": "Current live stream latency in seconds. It is the difference between current time and time position at the playback head."
      }
    ],
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function"
      }
    ],
    "name": "getCurrentLiveLatency",
    "longname": "module:MediaPlayer#getCurrentLiveLatency",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Add a custom ABR Rule\n   * Rule will be apply on next stream if a stream is being played\n   *\n   * @param {string} type - rule type (one of ['qualitySwitchRules','abandonFragmentRules'])\n   * @param {string} rulename - name of rule (used to identify custom rule). If one rule of same name has been added, then existing rule will be updated\n   * @param {object} rule - the rule object instance\n   * @memberof module:MediaPlayer\n   * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments.\n   * @instance\n   */",
    "meta": {
      "range": [
        34628,
        34742
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 969,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001713",
        "name": "addABRCustomRule",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type",
          "rulename",
          "rule"
        ]
      }
    },
    "description": "Add a custom ABR Rule\nRule will be apply on next stream if a stream is being played",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "rule type (one of ['qualitySwitchRules','abandonFragmentRules'])",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of rule (used to identify custom rule). If one rule of same name has been added, then existing rule will be updated",
        "name": "rulename"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "the rule object instance",
        "name": "rule"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments."
      }
    ],
    "scope": "instance",
    "name": "addABRCustomRule",
    "longname": "module:MediaPlayer#addABRCustomRule",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Remove a custom ABR Rule\n   *\n   * @param {string} rulename - name of the rule to be removed\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        34905,
        35001
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 980,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001727",
        "name": "removeABRCustomRule",
        "type": "FunctionDeclaration",
        "paramnames": [
          "rulename"
        ]
      }
    },
    "description": "Remove a custom ABR Rule",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the rule to be removed",
        "name": "rulename"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "removeABRCustomRule",
    "longname": "module:MediaPlayer#removeABRCustomRule",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Remove all custom rules\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        35095,
        35178
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 989,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001737",
        "name": "removeAllABRCustomRule",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Remove all custom rules",
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "removeAllABRCustomRule",
    "longname": "module:MediaPlayer#removeAllABRCustomRule",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * <p>Allows you to set a scheme and server source for UTC live edge detection for dynamic streams.\n   * If UTCTiming is defined in the manifest, it will take precedence over any time source manually added.</p>\n   * <p>If you have exposed the Date header, use the method {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}.\n   * This will allow the date header on the manifest to be used instead of a time server</p>\n   * @param {string} schemeIdUri - <ul>\n   * <li>urn:mpeg:dash:utc:http-head:2014</li>\n   * <li>urn:mpeg:dash:utc:http-xsdate:2014</li>\n   * <li>urn:mpeg:dash:utc:http-iso:2014</li>\n   * <li>urn:mpeg:dash:utc:direct:2014</li>\n   * </ul>\n   * <p>Some specs referencing early ISO23009-1 drafts incorrectly use\n   * 2012 in the URI, rather than 2014. support these for now.</p>\n   * <ul>\n   * <li>urn:mpeg:dash:utc:http-head:2012</li>\n   * <li>urn:mpeg:dash:utc:http-xsdate:2012</li>\n   * <li>urn:mpeg:dash:utc:http-iso:2012</li>\n   * <li>urn:mpeg:dash:utc:direct:2012</li>\n   * </ul>\n   * @param {string} value - Path to a time source.\n   * @default\n   * <ul>\n   *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>\n   *     <li>value:http://time.akamai.com/?iso&ms/li>\n   * </ul>\n   * @memberof module:MediaPlayer\n   * @see {@link module:MediaPlayer#removeUTCTimingSource removeUTCTimingSource()}\n   * @instance\n   */",
    "meta": {
      "range": [
        36568,
        36682
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1022,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001745",
        "name": "addUTCTimingSource",
        "type": "FunctionDeclaration",
        "paramnames": [
          "schemeIdUri",
          "value"
        ]
      }
    },
    "description": "<p>Allows you to set a scheme and server source for UTC live edge detection for dynamic streams.\nIf UTCTiming is defined in the manifest, it will take precedence over any time source manually added.</p>\n<p>If you have exposed the Date header, use the method {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}.\nThis will allow the date header on the manifest to be used instead of a time server</p>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "<ul>\n<li>urn:mpeg:dash:utc:http-head:2014</li>\n<li>urn:mpeg:dash:utc:http-xsdate:2014</li>\n<li>urn:mpeg:dash:utc:http-iso:2014</li>\n<li>urn:mpeg:dash:utc:direct:2014</li>\n</ul>\n<p>Some specs referencing early ISO23009-1 drafts incorrectly use\n2012 in the URI, rather than 2014. support these for now.</p>\n<ul>\n<li>urn:mpeg:dash:utc:http-head:2012</li>\n<li>urn:mpeg:dash:utc:http-xsdate:2012</li>\n<li>urn:mpeg:dash:utc:http-iso:2012</li>\n<li>urn:mpeg:dash:utc:direct:2012</li>\n</ul>",
        "name": "schemeIdUri"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to a time source.",
        "name": "value"
      }
    ],
    "defaultvalue": "<ul>\n    <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>\n    <li>value:http://time.akamai.com/?iso&ms/li>\n</ul>",
    "memberof": "module:MediaPlayer",
    "see": [
      "{@link module:MediaPlayer#removeUTCTimingSource removeUTCTimingSource()}"
    ],
    "scope": "instance",
    "name": "addUTCTimingSource",
    "longname": "module:MediaPlayer#addUTCTimingSource",
    "kind": "function"
  },
  {
    "comment": "/**\n   * <p>Allows you to remove a UTC time source. Both schemeIdUri and value need to match the Dash.vo.UTCTiming properties in order for the\n   * entry to be removed from the array</p>\n   * @param {string} schemeIdUri - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}\n   * @param {string} value - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}\n   * @memberof module:MediaPlayer\n   * @see {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}\n   * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments, schemeIdUri and value are not string type.\n   * @instance\n   */",
    "meta": {
      "range": [
        37379,
        37499
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1036,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001757",
        "name": "removeUTCTimingSource",
        "type": "FunctionDeclaration",
        "paramnames": [
          "schemeIdUri",
          "value"
        ]
      }
    },
    "description": "<p>Allows you to remove a UTC time source. Both schemeIdUri and value need to match the Dash.vo.UTCTiming properties in order for the\nentry to be removed from the array</p>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}",
        "name": "schemeIdUri"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}",
        "name": "value"
      }
    ],
    "memberof": "module:MediaPlayer",
    "see": [
      "{@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}"
    ],
    "exceptions": [
      {
        "description": "{@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments, schemeIdUri and value are not string type."
      }
    ],
    "scope": "instance",
    "name": "removeUTCTimingSource",
    "longname": "module:MediaPlayer#removeUTCTimingSource",
    "kind": "function"
  },
  {
    "comment": "/**\n   * <p>Allows you to clear the stored array of time sources.</p>\n   * <p>Example use: If you have exposed the Date header, calling this method\n   * will allow the date header on the manifest to be used instead of the time server.</p>\n   * <p>Example use: Calling this method, assuming there is not an exposed date header on the manifest,  will default back\n   * to using a binary search to discover the live edge</p>\n   *\n   * @memberof module:MediaPlayer\n   * @see {@link module:MediaPlayer#restoreDefaultUTCTimingSources restoreDefaultUTCTimingSources()}\n   * @instance\n   */",
    "meta": {
      "range": [
        38088,
        38186
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1051,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001769",
        "name": "clearDefaultUTCTimingSources",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "<p>Allows you to clear the stored array of time sources.</p>\n<p>Example use: If you have exposed the Date header, calling this method\nwill allow the date header on the manifest to be used instead of the time server.</p>\n<p>Example use: Calling this method, assuming there is not an exposed date header on the manifest,  will default back\nto using a binary search to discover the live edge</p>",
    "memberof": "module:MediaPlayer",
    "see": [
      "{@link module:MediaPlayer#restoreDefaultUTCTimingSources restoreDefaultUTCTimingSources()}"
    ],
    "scope": "instance",
    "name": "clearDefaultUTCTimingSources",
    "longname": "module:MediaPlayer#clearDefaultUTCTimingSources",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * <p>Allows you to restore the default time sources after calling {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}</p>\n   *\n   * @default\n   * <ul>\n   *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>\n   *     <li>value:http://time.akamai.com/?iso&ms</li>\n   * </ul>\n   *\n   * @memberof module:MediaPlayer\n   * @see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}\n   * @instance\n   */",
    "meta": {
      "range": [
        38653,
        38755
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1068,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001777",
        "name": "restoreDefaultUTCTimingSources",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "<p>Allows you to restore the default time sources after calling {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}</p>",
    "defaultvalue": "<ul>\n    <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>\n    <li>value:http://time.akamai.com/?iso&ms</li>\n</ul>",
    "memberof": "module:MediaPlayer",
    "see": [
      "{@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}"
    ],
    "scope": "instance",
    "name": "restoreDefaultUTCTimingSources",
    "longname": "module:MediaPlayer#restoreDefaultUTCTimingSources",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Returns the average throughput computed in the ABR logic\n   *\n   * @param {MediaType} type\n   * @return {number} value\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        38944,
        39134
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1080,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001785",
        "name": "getAverageThroughput",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type"
        ]
      },
      "vars": {
        "throughputHistory": "module:MediaPlayer#getAverageThroughput~throughputHistory"
      }
    },
    "description": "Returns the average throughput computed in the ABR logic",
    "params": [
      {
        "type": {
          "names": [
            "MediaType"
          ]
        },
        "name": "type"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "value"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getAverageThroughput",
    "longname": "module:MediaPlayer#getAverageThroughput",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Sets whether withCredentials on XHR requests for a particular request\n   * type is true or false\n   *\n   * @default false\n   * @param {string} type - one of HTTPRequest.*_TYPE\n   * @param {boolean} value\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        39408,
        39528
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1095,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001805",
        "name": "setXHRWithCredentialsForType",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type",
          "value"
        ]
      }
    },
    "description": "Sets whether withCredentials on XHR requests for a particular request\ntype is true or false",
    "defaultvalue": "false",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "one of HTTPRequest.*_TYPE",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "name": "value"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "setXHRWithCredentialsForType",
    "longname": "module:MediaPlayer#setXHRWithCredentialsForType",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Gets whether withCredentials on XHR requests for a particular request\n   * type is true or false\n   *\n   * @param {string} type - one of HTTPRequest.*_TYPE\n   * @return {boolean}\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        39777,
        39890
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1108,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001817",
        "name": "getXHRWithCredentialsForType",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type"
        ]
      }
    },
    "description": "Gets whether withCredentials on XHR requests for a particular request\ntype is true or false",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "one of HTTPRequest.*_TYPE",
        "name": "type"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        }
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getXHRWithCredentialsForType",
    "longname": "module:MediaPlayer#getXHRWithCredentialsForType",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Detects if Offline is included and returns an instance of OfflineController.js\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        40230,
        40295
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1125,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001827",
        "name": "getOfflineController",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Detects if Offline is included and returns an instance of OfflineController.js",
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getOfflineController",
    "longname": "module:MediaPlayer#getOfflineController",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Returns the DashMetrics.js Module. You use this Module to get access to all the public metrics\n   * stored in dash.js\n   *\n   * @see {@link module:DashMetrics}\n   * @returns {Object}\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        40738,
        40793
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1145,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001833",
        "name": "getDashMetrics",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Returns the DashMetrics.js Module. You use this Module to get access to all the public metrics\nstored in dash.js",
    "see": [
      "{@link module:DashMetrics}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getDashMetrics",
    "longname": "module:MediaPlayer#getDashMetrics",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Set default language for text. If default language is not one of text tracks, dash will choose the first one.\n   *\n   * @param {string} lang - default language\n   * @memberof module:MediaPlayer\n   * @instance\n   * @deprecated will be removed in version 3.2.0. Please use setInitialMediaSettingsFor(\"fragmentedText\", { lang: lang }) instead\n   */",
    "meta": {
      "range": [
        41352,
        41727
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1164,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001838",
        "name": "setTextDefaultLanguage",
        "type": "FunctionDeclaration",
        "paramnames": [
          "lang"
        ]
      },
      "vars": {
        "textController": "module:MediaPlayer~textController"
      }
    },
    "description": "Set default language for text. If default language is not one of text tracks, dash will choose the first one.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "default language",
        "name": "lang"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "deprecated": "will be removed in version 3.2.0. Please use setInitialMediaSettingsFor(\"fragmentedText\", { lang: lang }) instead",
    "name": "setTextDefaultLanguage",
    "longname": "module:MediaPlayer#setTextDefaultLanguage",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Get default language for text.\n   *\n   * @return {string} the default language if it has been set using setTextDefaultLanguage\n   * @memberof module:MediaPlayer\n   * @instance\n   * @deprecated will be removed in version 3.2.0. Please use getInitialMediaSettingsFor(\"fragmentedText\").lang instead\n   */",
    "meta": {
      "range": [
        42044,
        42408
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1180,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001868",
        "name": "getTextDefaultLanguage",
        "type": "FunctionDeclaration",
        "paramnames": []
      },
      "vars": {
        "textController": "module:MediaPlayer~textController"
      }
    },
    "description": "Get default language for text.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the default language if it has been set using setTextDefaultLanguage"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "deprecated": "will be removed in version 3.2.0. Please use getInitialMediaSettingsFor(\"fragmentedText\").lang instead",
    "name": "getTextDefaultLanguage",
    "longname": "module:MediaPlayer#getTextDefaultLanguage",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Set enabled default state.\n   * This is used to enable/disable text when a file is loaded.\n   * During playback, use enableText to enable text for the file\n   *\n   * @param {boolean} enable - true to enable text, false otherwise\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        42707,
        42910
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1198,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001896",
        "name": "setTextDefaultEnabled",
        "type": "FunctionDeclaration",
        "paramnames": [
          "enable"
        ]
      },
      "vars": {
        "textController": "module:MediaPlayer~textController"
      }
    },
    "description": "Set enabled default state.\nThis is used to enable/disable text when a file is loaded.\nDuring playback, use enableText to enable text for the file",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "true to enable text, false otherwise",
        "name": "enable"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "setTextDefaultEnabled",
    "longname": "module:MediaPlayer#setTextDefaultEnabled",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Get enabled default state.\n   *\n   * @return {boolean}  default enable state\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        43057,
        43255
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1213,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001920",
        "name": "getTextDefaultEnabled",
        "type": "FunctionDeclaration",
        "paramnames": []
      },
      "vars": {
        "textController": "module:MediaPlayer~textController"
      }
    },
    "description": "Get enabled default state.",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "default enable state"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getTextDefaultEnabled",
    "longname": "module:MediaPlayer#getTextDefaultEnabled",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Enable/disable text\n   * When enabling text, dash will choose the previous selected text track\n   *\n   * @param {boolean} enable - true to enable text, false otherwise (same as setTextTrack(-1))\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        43520,
        43701
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1229,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001942",
        "name": "enableText",
        "type": "FunctionDeclaration",
        "paramnames": [
          "enable"
        ]
      },
      "vars": {
        "textController": "module:MediaPlayer~textController"
      }
    },
    "description": "Enable/disable text\nWhen enabling text, dash will choose the previous selected text track",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "true to enable text, false otherwise (same as setTextTrack(-1))",
        "name": "enable"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "enableText",
    "longname": "module:MediaPlayer#enableText",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Enable/disable text\n   * When enabling dash will keep downloading and process fragmented text tracks even if all tracks are in mode \"hidden\"\n   *\n   * @param {boolean} enable - true to enable text streaming even if all text tracks are hidden.\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        44014,
        44225
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1245,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001966",
        "name": "enableForcedTextStreaming",
        "type": "FunctionDeclaration",
        "paramnames": [
          "enable"
        ]
      },
      "vars": {
        "textController": "module:MediaPlayer~textController"
      }
    },
    "description": "Enable/disable text\nWhen enabling dash will keep downloading and process fragmented text tracks even if all tracks are in mode \"hidden\"",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "true to enable text streaming even if all text tracks are hidden.",
        "name": "enable"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "enableForcedTextStreaming",
    "longname": "module:MediaPlayer#enableForcedTextStreaming",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Return if text is enabled\n   *\n   * @return {boolean} return true if text is enabled, false otherwise\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        44397,
        44579
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1260,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100001990",
        "name": "isTextEnabled",
        "type": "FunctionDeclaration",
        "paramnames": []
      },
      "vars": {
        "textController": "module:MediaPlayer~textController"
      }
    },
    "description": "Return if text is enabled",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "return true if text is enabled, false otherwise"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "isTextEnabled",
    "longname": "module:MediaPlayer#isTextEnabled",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Use this method to change the current text track for both external time text files and fragmented text tracks. There is no need to\n   * set the track mode on the video object to switch a track when using this method.\n   * @param {number} idx - Index of track based on the order of the order the tracks are added Use -1 to disable all tracks. (turn captions off).  Use module:MediaPlayer#dashjs.MediaPlayer.events.TEXT_TRACK_ADDED.\n   * @see {@link MediaPlayerEvents#event:TEXT_TRACK_ADDED dashjs.MediaPlayer.events.TEXT_TRACK_ADDED}\n   * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        45329,
        45591
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1277,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002012",
        "name": "setTextTrack",
        "type": "FunctionDeclaration",
        "paramnames": [
          "idx"
        ]
      },
      "vars": {
        "textController": "module:MediaPlayer~textController"
      }
    },
    "description": "Use this method to change the current text track for both external time text files and fragmented text tracks. There is no need to\nset the track mode on the video object to switch a track when using this method.",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Index of track based on the order of the order the tracks are added Use -1 to disable all tracks. (turn captions off).  Use module:MediaPlayer#dashjs.MediaPlayer.events.TEXT_TRACK_ADDED.",
        "name": "idx"
      }
    ],
    "see": [
      "{@link MediaPlayerEvents#event:TEXT_TRACK_ADDED dashjs.MediaPlayer.events.TEXT_TRACK_ADDED}"
    ],
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "setTextTrack",
    "longname": "module:MediaPlayer#setTextTrack",
    "kind": "function"
  },
  {
    "comment": "/**\n   * This method serves to control captions z-index value. If 'true' is passed, the captions will have the highest z-index and be\n   * displayed on top of other html elements. Default value is 'false' (z-index is not set).\n   * @param {boolean} value\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        46068,
        46301
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1304,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002061",
        "name": "displayCaptionsOnTop",
        "type": "FunctionDeclaration",
        "paramnames": [
          "value"
        ]
      },
      "vars": {
        "textTracks": "module:MediaPlayer#displayCaptionsOnTop~textTracks"
      }
    },
    "description": "This method serves to control captions z-index value. If 'true' is passed, the captions will have the highest z-index and be\ndisplayed on top of other html elements. Default value is 'false' (z-index is not set).",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "name": "value"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "displayCaptionsOnTop",
    "longname": "module:MediaPlayer#displayCaptionsOnTop",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Returns instance of Video Element that was attached by calling attachView()\n   * @returns {Object}\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~ELEMENT_NOT_ATTACHED_ERROR ELEMENT_NOT_ATTACHED_ERROR} if called before attachView function\n   * @instance\n   */",
    "meta": {
      "range": [
        46809,
        46959
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1328,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002093",
        "name": "getVideoElement",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Returns instance of Video Element that was attached by calling attachView()",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~ELEMENT_NOT_ATTACHED_ERROR ELEMENT_NOT_ATTACHED_ERROR} if called before attachView function"
      }
    ],
    "scope": "instance",
    "name": "getVideoElement",
    "longname": "module:MediaPlayer#getVideoElement",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Use this method to attach an HTML5 VideoElement for dash.js to operate upon.\n   *\n   * @param {Object} element - An HTMLMediaElement that has already been defined in the DOM (or equivalent stub).\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n   * @instance\n   */",
    "meta": {
      "range": [
        47372,
        47894
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1343,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002110",
        "name": "attachView",
        "type": "FunctionDeclaration",
        "paramnames": [
          "element"
        ]
      }
    },
    "description": "Use this method to attach an HTML5 VideoElement for dash.js to operate upon.",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "An HTMLMediaElement that has already been defined in the DOM (or equivalent stub).",
        "name": "element"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function"
      }
    ],
    "scope": "instance",
    "name": "attachView",
    "longname": "module:MediaPlayer#attachView",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Returns instance of Div that was attached by calling attachTTMLRenderingDiv()\n   * @returns {Object}\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        48065,
        48166
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1374,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002155",
        "name": "getTTMLRenderingDiv",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Returns instance of Div that was attached by calling attachTTMLRenderingDiv()",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getTTMLRenderingDiv",
    "longname": "module:MediaPlayer#getTTMLRenderingDiv",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Use this method to attach an HTML5 div for dash.js to render rich TTML subtitles.\n   *\n   * @param {HTMLDivElement} div - An unstyled div placed after the video element. It will be styled to match the video size and overlay z-order.\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~ELEMENT_NOT_ATTACHED_ERROR ELEMENT_NOT_ATTACHED_ERROR} if called before attachView function\n   * @instance\n   */",
    "meta": {
      "range": [
        48600,
        48765
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1386,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002166",
        "name": "attachTTMLRenderingDiv",
        "type": "FunctionDeclaration",
        "paramnames": [
          "div"
        ]
      }
    },
    "description": "Use this method to attach an HTML5 div for dash.js to render rich TTML subtitles.",
    "params": [
      {
        "type": {
          "names": [
            "HTMLDivElement"
          ]
        },
        "description": "An unstyled div placed after the video element. It will be styled to match the video size and overlay z-order.",
        "name": "div"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~ELEMENT_NOT_ATTACHED_ERROR ELEMENT_NOT_ATTACHED_ERROR} if called before attachView function"
      }
    ],
    "scope": "instance",
    "name": "attachTTMLRenderingDiv",
    "longname": "module:MediaPlayer#attachTTMLRenderingDiv",
    "kind": "function"
  },
  {
    "comment": "/**\n   * @param {MediaType} type\n   * @returns {Array}\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @instance\n   */",
    "meta": {
      "range": [
        49240,
        49459
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1407,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002185",
        "name": "getBitrateInfoListFor",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type"
        ]
      },
      "vars": {
        "stream": "module:MediaPlayer#getBitrateInfoListFor~stream"
      }
    },
    "params": [
      {
        "type": {
          "names": [
            "MediaType"
          ]
        },
        "name": "type"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "scope": "instance",
    "name": "getBitrateInfoListFor",
    "longname": "module:MediaPlayer#getBitrateInfoListFor",
    "kind": "function"
  },
  {
    "comment": "/**\n   * This method returns the list of all available streams from a given manifest\n   * @param {Object} manifest\n   * @returns {Array} list of {@link StreamInfo}\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @instance\n   */",
    "meta": {
      "range": [
        49833,
        50009
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1423,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002209",
        "name": "getStreamsFromManifest",
        "type": "FunctionDeclaration",
        "paramnames": [
          "manifest"
        ]
      }
    },
    "description": "This method returns the list of all available streams from a given manifest",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "manifest"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "list of {@link StreamInfo}"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "scope": "instance",
    "name": "getStreamsFromManifest",
    "longname": "module:MediaPlayer#getStreamsFromManifest",
    "kind": "function"
  },
  {
    "comment": "/**\n   * This method returns the list of all available tracks for a given media type\n   * @param {MediaType} type\n   * @returns {Array} list of {@link MediaInfo}\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @instance\n   */",
    "meta": {
      "range": [
        50381,
        50618
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1438,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002225",
        "name": "getTracksFor",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type"
        ]
      },
      "vars": {
        "streamInfo": "module:MediaPlayer#getTracksFor~streamInfo"
      }
    },
    "description": "This method returns the list of all available tracks for a given media type",
    "params": [
      {
        "type": {
          "names": [
            "MediaType"
          ]
        },
        "name": "type"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "list of {@link MediaInfo}"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "scope": "instance",
    "name": "getTracksFor",
    "longname": "module:MediaPlayer#getTracksFor",
    "kind": "function"
  },
  {
    "comment": "/**\n   * This method returns the list of all available tracks for a given media type and streamInfo from a given manifest\n   * @param {MediaType} type\n   * @param {Object} manifest\n   * @param {Object} streamInfo\n   * @returns {Array}  list of {@link MediaInfo}\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @instance\n   */",
    "meta": {
      "range": [
        51090,
        51407
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1456,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002249",
        "name": "getTracksForTypeFromManifest",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type",
          "manifest",
          "streamInfo"
        ]
      },
      "vars": {
        "streamInfo": "module:MediaPlayer~streamInfo"
      }
    },
    "description": "This method returns the list of all available tracks for a given media type and streamInfo from a given manifest",
    "params": [
      {
        "type": {
          "names": [
            "MediaType"
          ]
        },
        "name": "type"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "manifest"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "streamInfo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "list of {@link MediaInfo}"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "scope": "instance",
    "name": "getTracksForTypeFromManifest",
    "longname": "module:MediaPlayer#getTracksForTypeFromManifest",
    "kind": "function"
  },
  {
    "comment": "/**\n   * @param {MediaType} type\n   * @returns {Object|null} {@link MediaInfo}\n   *\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @instance\n   */",
    "meta": {
      "range": [
        51701,
        51950
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1474,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002285",
        "name": "getCurrentTrackFor",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type"
        ]
      },
      "vars": {
        "streamInfo": "module:MediaPlayer#getCurrentTrackFor~streamInfo"
      }
    },
    "params": [
      {
        "type": {
          "names": [
            "MediaType"
          ]
        },
        "name": "type"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object",
            "null"
          ]
        },
        "description": "{@link MediaInfo}"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "scope": "instance",
    "name": "getCurrentTrackFor",
    "longname": "module:MediaPlayer#getCurrentTrackFor",
    "kind": "function"
  },
  {
    "comment": "/**\n   * This method allows to set media settings that will be used to pick the initial track. Format of the settings\n   * is following: <br />\n   * {lang: langValue (can be either a string or a regex to match),\n   *  viewpoint: viewpointValue,\n   *  audioChannelConfiguration: audioChannelConfigurationValue,\n   *  accessibility: accessibilityValue,\n   *  role: roleValue}\n   *\n   * @param {MediaType} type\n   * @param {Object} value\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n   * @instance\n   */",
    "meta": {
      "range": [
        52593,
        52889
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1497,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002309",
        "name": "setInitialMediaSettingsFor",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type",
          "value"
        ]
      }
    },
    "description": "This method allows to set media settings that will be used to pick the initial track. Format of the settings\nis following: <br />\n{lang: langValue (can be either a string or a regex to match),\n viewpoint: viewpointValue,\n audioChannelConfiguration: audioChannelConfigurationValue,\n accessibility: accessibilityValue,\n role: roleValue}",
    "params": [
      {
        "type": {
          "names": [
            "MediaType"
          ]
        },
        "name": "type"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "value"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function"
      }
    ],
    "scope": "instance",
    "name": "setInitialMediaSettingsFor",
    "longname": "module:MediaPlayer#setInitialMediaSettingsFor",
    "kind": "function"
  },
  {
    "comment": "/**\n   * This method returns media settings that is used to pick the initial track. Format of the settings\n   * is following:\n   * {lang: langValue,\n   *  viewpoint: viewpointValue,\n   *  audioChannelConfiguration: audioChannelConfigurationValue,\n   *  accessibility: accessibilityValue,\n   *  role: roleValue}\n   * @param {MediaType} type\n   * @returns {Object}\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n   * @instance\n   */",
    "meta": {
      "range": [
        53460,
        53649
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1521,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002340",
        "name": "getInitialMediaSettingsFor",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type"
        ]
      }
    },
    "description": "This method returns media settings that is used to pick the initial track. Format of the settings\nis following:\n{lang: langValue,\n viewpoint: viewpointValue,\n audioChannelConfiguration: audioChannelConfigurationValue,\n accessibility: accessibilityValue,\n role: roleValue}",
    "params": [
      {
        "type": {
          "names": [
            "MediaType"
          ]
        },
        "name": "type"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function"
      }
    ],
    "scope": "instance",
    "name": "getInitialMediaSettingsFor",
    "longname": "module:MediaPlayer#getInitialMediaSettingsFor",
    "kind": "function"
  },
  {
    "comment": "/**\n   * @param {MediaInfo} track - instance of {@link MediaInfo}\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @instance\n   */",
    "meta": {
      "range": [
        53925,
        54083
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1534,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002356",
        "name": "setCurrentTrack",
        "type": "FunctionDeclaration",
        "paramnames": [
          "track"
        ]
      }
    },
    "params": [
      {
        "type": {
          "names": [
            "MediaInfo"
          ]
        },
        "description": "instance of {@link MediaInfo}",
        "name": "track"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "scope": "instance",
    "name": "setCurrentTrack",
    "longname": "module:MediaPlayer#setCurrentTrack",
    "kind": "function"
  },
  {
    "comment": "/**\n   * This method returns the current track switch mode.\n   *\n   * @param {MediaType} type\n   * @returns {string} mode\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n   * @instance\n   */",
    "meta": {
      "range": [
        54413,
        54592
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1550,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002372",
        "name": "getTrackSwitchModeFor",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type"
        ]
      }
    },
    "description": "This method returns the current track switch mode.",
    "params": [
      {
        "type": {
          "names": [
            "MediaType"
          ]
        },
        "name": "type"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "mode"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function"
      }
    ],
    "scope": "instance",
    "name": "getTrackSwitchModeFor",
    "longname": "module:MediaPlayer#getTrackSwitchModeFor",
    "kind": "function"
  },
  {
    "comment": "/**\n   * This method sets the current track switch mode. Available options are:\n   *\n   * Constants.TRACK_SWITCH_MODE_NEVER_REPLACE\n   * (used to forbid clearing the buffered data (prior to current playback position) after track switch.\n   * Defers to fastSwitchEnabled for placement of new data. Default for video)\n   *\n   * Constants.TRACK_SWITCH_MODE_ALWAYS_REPLACE\n   * (used to clear the buffered data (prior to current playback position) after track switch. Default for audio)\n   *\n   * @param {MediaType} type\n   * @param {string} mode\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n   * @instance\n   */",
    "meta": {
      "range": [
        55343,
        55527
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1573,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002388",
        "name": "setTrackSwitchModeFor",
        "type": "FunctionDeclaration",
        "paramnames": [
          "type",
          "mode"
        ]
      }
    },
    "description": "This method sets the current track switch mode. Available options are:\n\nConstants.TRACK_SWITCH_MODE_NEVER_REPLACE\n(used to forbid clearing the buffered data (prior to current playback position) after track switch.\nDefers to fastSwitchEnabled for placement of new data. Default for video)\n\nConstants.TRACK_SWITCH_MODE_ALWAYS_REPLACE\n(used to clear the buffered data (prior to current playback position) after track switch. Default for audio)",
    "params": [
      {
        "type": {
          "names": [
            "MediaType"
          ]
        },
        "name": "type"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "mode"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function"
      }
    ],
    "scope": "instance",
    "name": "setTrackSwitchModeFor",
    "longname": "module:MediaPlayer#setTrackSwitchModeFor",
    "kind": "function"
  },
  {
    "comment": "/**\n   * This method sets the selection mode for the initial track. This mode defines how the initial track will be selected\n   * if no initial media settings are set. If initial media settings are set this parameter will be ignored. Available options are:\n   *\n   * Constants.TRACK_SELECTION_MODE_HIGHEST_BITRATE\n   * this mode makes the player select the track with a highest bitrate. This mode is a default mode.\n   *\n   * Constants.TRACK_SELECTION_MODE_WIDEST_RANGE\n   * this mode makes the player select the track with a widest range of bitrates\n   *\n   * @param {string} mode\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n   * @instance\n   */",
    "meta": {
      "range": [
        56317,
        56517
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1595,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002406",
        "name": "setSelectionModeForInitialTrack",
        "type": "FunctionDeclaration",
        "paramnames": [
          "mode"
        ]
      }
    },
    "description": "This method sets the selection mode for the initial track. This mode defines how the initial track will be selected\nif no initial media settings are set. If initial media settings are set this parameter will be ignored. Available options are:\n\nConstants.TRACK_SELECTION_MODE_HIGHEST_BITRATE\nthis mode makes the player select the track with a highest bitrate. This mode is a default mode.\n\nConstants.TRACK_SELECTION_MODE_WIDEST_RANGE\nthis mode makes the player select the track with a widest range of bitrates",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "mode"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function"
      }
    ],
    "scope": "instance",
    "name": "setSelectionModeForInitialTrack",
    "longname": "module:MediaPlayer#setSelectionModeForInitialTrack",
    "kind": "function"
  },
  {
    "comment": "/**\n   * This method returns the track selection mode.\n   *\n   * @returns {string} mode\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n   * @instance\n   */",
    "meta": {
      "range": [
        56813,
        57012
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1610,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002422",
        "name": "getSelectionModeForInitialTrack",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "This method returns the track selection mode.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "mode"
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function"
      }
    ],
    "scope": "instance",
    "name": "getSelectionModeForInitialTrack",
    "longname": "module:MediaPlayer#getSelectionModeForInitialTrack",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Detects if Protection is included and returns an instance of ProtectionController.js\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        57372,
        57443
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1630,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002436",
        "name": "getProtectionController",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Detects if Protection is included and returns an instance of ProtectionController.js",
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getProtectionController",
    "longname": "module:MediaPlayer#getProtectionController",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Will override dash.js protection controller.\n   * @param {ProtectionController} value - valid protection controller instance.\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        57639,
        57721
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1640,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002442",
        "name": "attachProtectionController",
        "type": "FunctionDeclaration",
        "paramnames": [
          "value"
        ]
      },
      "vars": {
        "protectionController": "module:MediaPlayer~protectionController"
      }
    },
    "description": "Will override dash.js protection controller.",
    "params": [
      {
        "type": {
          "names": [
            "ProtectionController"
          ]
        },
        "description": "valid protection controller instance.",
        "name": "value"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "attachProtectionController",
    "longname": "module:MediaPlayer#attachProtectionController",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Sets Protection Data required to setup the Protection Module (DRM). Protection Data must\n   * be set before initializing MediaPlayer or, once initialized, before PROTECTION_CREATED event is fired.\n   * @see {@link module:MediaPlayer#initialize initialize()}\n   * @see {@link ProtectionEvents#event:PROTECTION_CREATED dashjs.Protection.events.PROTECTION_CREATED}\n   * @param {ProtectionDataSet} value - object containing\n   * property names corresponding to key system name strings and associated\n   * values being instances of.\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        58319,
        58548
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1655,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002450",
        "name": "setProtectionData",
        "type": "FunctionDeclaration",
        "paramnames": [
          "value"
        ]
      },
      "vars": {
        "protectionData": "module:MediaPlayer~protectionData"
      }
    },
    "description": "Sets Protection Data required to setup the Protection Module (DRM). Protection Data must\nbe set before initializing MediaPlayer or, once initialized, before PROTECTION_CREATED event is fired.",
    "see": [
      "{@link module:MediaPlayer#initialize initialize()}",
      "{@link ProtectionEvents#event:PROTECTION_CREATED dashjs.Protection.events.PROTECTION_CREATED}"
    ],
    "params": [
      {
        "type": {
          "names": [
            "ProtectionDataSet"
          ]
        },
        "description": "object containing\nproperty names corresponding to key system name strings and associated\nvalues being instances of.",
        "name": "value"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "setProtectionData",
    "longname": "module:MediaPlayer#setProtectionData",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Provide the thumbnail at time position. This can be asynchronous, so you must provide a callback ro retrieve thumbnails informations\n   * @param {number} time - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected\n   * @param {function} callback - A Callback function provided when retrieving thumbnail the given time position. Thumbnail object is null in case there are is not a thumbnails representation or\n   * if it doesn't contain a thumbnail for the given time position.\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        59375,
        60046
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1680,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002467",
        "name": "provideThumbnail",
        "type": "FunctionDeclaration",
        "paramnames": [
          "time",
          "callback"
        ]
      },
      "vars": {
        "s": "module:MediaPlayer#provideThumbnail~s",
        "stream": "module:MediaPlayer#provideThumbnail~stream",
        "thumbnailController": "module:MediaPlayer#provideThumbnail~thumbnailController",
        "timeInPeriod": "module:MediaPlayer#provideThumbnail~timeInPeriod"
      }
    },
    "description": "Provide the thumbnail at time position. This can be asynchronous, so you must provide a callback ro retrieve thumbnails informations",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected",
        "name": "time"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "A Callback function provided when retrieving thumbnail the given time position. Thumbnail object is null in case there are is not a thumbnails representation or\nif it doesn't contain a thumbnail for the given time position.",
        "name": "callback"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "provideThumbnail",
    "longname": "module:MediaPlayer#provideThumbnail",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Allows application to retrieve a manifest.  Manifest loading is asynchro\n   * nous and\n   * requires the app-provided callback function\n   *\n   * @param {string} url - url the manifest url\n   * @param {function} callback - A Callback function provided when retrieving manifests\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        60603,
        61103
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1722,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002554",
        "name": "retrieveManifest",
        "type": "FunctionDeclaration",
        "paramnames": [
          "url",
          "callback"
        ]
      },
      "vars": {
        "manifestLoader": "module:MediaPlayer#retrieveManifest~manifestLoader",
        "self": "module:MediaPlayer#retrieveManifest~self",
        "handler": "module:MediaPlayer#retrieveManifest~handler",
        "": null
      }
    },
    "description": "Allows application to retrieve a manifest.  Manifest loading is asynchro\nnous and\nrequires the app-provided callback function",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "url the manifest url",
        "name": "url"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "A Callback function provided when retrieving manifests",
        "name": "callback"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "retrieveManifest",
    "longname": "module:MediaPlayer#retrieveManifest",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Returns the source string or manifest that was attached by calling attachSource()\n   * @returns {string | manifest}\n   * @memberof module:MediaPlayer\n   * @throws {@link module:MediaPlayer~SOURCE_NOT_ATTACHED_ERROR SOURCE_NOT_ATTACHED_ERROR} if called before attachSource function\n   * @instance\n   */",
    "meta": {
      "range": [
        61420,
        61529
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1749,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002631",
        "name": "getSource",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Returns the source string or manifest that was attached by calling attachSource()",
    "returns": [
      {
        "type": {
          "names": [
            "string",
            "manifest"
          ]
        }
      }
    ],
    "memberof": "module:MediaPlayer",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~SOURCE_NOT_ATTACHED_ERROR SOURCE_NOT_ATTACHED_ERROR} if called before attachSource function"
      }
    ],
    "scope": "instance",
    "name": "getSource",
    "longname": "module:MediaPlayer#getSource",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Use this method to set a source URL to a valid MPD manifest file OR\n   * a previously downloaded and parsed manifest object.  Optionally, can\n   * also provide protection information\n   *\n   * @param {string|Object} urlOrManifest - A URL to a valid MPD manifest file, or a\n   * parsed manifest object.\n   *\n   *\n   * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n   *\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        62063,
        62477
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1770,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002642",
        "name": "attachSource",
        "type": "FunctionDeclaration",
        "paramnames": [
          "urlOrManifest"
        ]
      },
      "vars": {
        "source": "module:MediaPlayer~source"
      }
    },
    "description": "Use this method to set a source URL to a valid MPD manifest file OR\na previously downloaded and parsed manifest object.  Optionally, can\nalso provide protection information",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "Object"
          ]
        },
        "description": "A URL to a valid MPD manifest file, or a\nparsed manifest object.",
        "name": "urlOrManifest"
      }
    ],
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "attachSource",
    "longname": "module:MediaPlayer#attachSource",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Get the current settings object being used on the player.\n   * @returns {PlayerSettings} The settings object being used.\n   *\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        62673,
        62728
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1797,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002683",
        "name": "getSettings",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Get the current settings object being used on the player.",
    "returns": [
      {
        "type": {
          "names": [
            "PlayerSettings"
          ]
        },
        "description": "The settings object being used."
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getSettings",
    "longname": "module:MediaPlayer#getSettings",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * @summary Update the current settings object being used on the player. Anything left unspecified is not modified.\n   * @param {PlayerSettings} settingsObj - An object corresponding to the settings definition.\n   * @description This function does not update the entire object, only properties in the passed in object are updated.\n   *\n   * This means that updateSettings({a: x}) and updateSettings({b: y}) are functionally equivalent to\n   * updateSettings({a: x, b: y}). If the default values are required again, @see{@link resetSettings}.\n   * @example\n   * player.updateSettings({\n   *      streaming: {\n   *          liveDelayFragmentCount: 8\n   *          abr: {\n   *              maxBitrate: { audio: 100, video: 1000 }\n   *          }\n   *      }\n   *  });\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        63560,
        63636
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1820,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002691",
        "name": "updateSettings",
        "type": "FunctionDeclaration",
        "paramnames": [
          "settingsObj"
        ]
      }
    },
    "summary": "Update the current settings object being used on the player. Anything left unspecified is not modified.",
    "params": [
      {
        "type": {
          "names": [
            "PlayerSettings"
          ]
        },
        "description": "An object corresponding to the settings definition.",
        "name": "settingsObj"
      }
    ],
    "description": "This function does not update the entire object, only properties in the passed in object are updated.\n\nThis means that updateSettings({a: x}) and updateSettings({b: y}) are functionally equivalent to\nupdateSettings({a: x, b: y}). If the default values are required again, @see{@link resetSettings}.",
    "examples": [
      "player.updateSettings({\n     streaming: {\n         liveDelayFragmentCount: 8\n         abr: {\n             maxBitrate: { audio: 100, video: 1000 }\n         }\n     }\n });"
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "updateSettings",
    "longname": "module:MediaPlayer#updateSettings",
    "kind": "function"
  },
  {
    "comment": "/**\n   * Resets the settings object back to the default.\n   *\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        63759,
        63811
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1830,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002701",
        "name": "resetSettings",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Resets the settings object back to the default.",
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "resetSettings",
    "longname": "module:MediaPlayer#resetSettings",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * A utility methods which converts UTC timestamp value into a valid time and date string.\n   *\n   * @param {number} time - UTC timestamp to be converted into date and time.\n   * @param {string} locales - a region identifier (i.e. en_US).\n   * @param {boolean} hour12 - 12 vs 24 hour. Set to true for 12 hour time formatting.\n   * @param {boolean} withDate - default is false. Set to true to append current date to UTC time format.\n   * @returns {string} A formatted time and date string.\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        64367,
        64632
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1845,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002709",
        "name": "formatUTC",
        "type": "FunctionDeclaration",
        "paramnames": [
          "time",
          "locales",
          "hour12",
          "withDate"
        ]
      },
      "vars": {
        "dt": "module:MediaPlayer#formatUTC~dt",
        "d": "module:MediaPlayer#formatUTC~d",
        "t": "module:MediaPlayer#formatUTC~t"
      }
    },
    "description": "A utility methods which converts UTC timestamp value into a valid time and date string.",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "UTC timestamp to be converted into date and time.",
        "name": "time"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "a region identifier (i.e. en_US).",
        "name": "locales"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "12 vs 24 hour. Set to true for 12 hour time formatting.",
        "name": "hour12"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "default is false. Set to true to append current date to UTC time format.",
        "name": "withDate",
        "defaultvalue": false
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A formatted time and date string."
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "formatUTC",
    "longname": "module:MediaPlayer#formatUTC",
    "kind": "function"
  },
  {
    "comment": "/**\n   * A utility method which converts seconds into TimeCode (i.e. 300 --> 05:00).\n   *\n   * @param {number} value - A number in seconds to be converted into a formatted time code.\n   * @returns {string} A formatted time code string.\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        64929,
        65327
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1862,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002754",
        "name": "convertToTimeCode",
        "type": "FunctionDeclaration",
        "paramnames": [
          "value"
        ]
      },
      "vars": {
        "value": "module:MediaPlayer~value",
        "h": "module:MediaPlayer#convertToTimeCode~h",
        "m": "module:MediaPlayer#convertToTimeCode~m",
        "s": "module:MediaPlayer#convertToTimeCode~s"
      }
    },
    "description": "A utility method which converts seconds into TimeCode (i.e. 300 --> 05:00).",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A number in seconds to be converted into a formatted time code.",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A formatted time code string."
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "convertToTimeCode",
    "longname": "module:MediaPlayer#convertToTimeCode",
    "kind": "function"
  },
  {
    "comment": "/**\n   * This method should be used to extend or replace internal dash.js objects.\n   * There are two ways to extend dash.js (determined by the override argument):\n   * <ol>\n   * <li>If you set override to true any public method or property in your custom object will\n   * override the dash.js parent object's property(ies) and will be used instead but the\n   * dash.js parent module will still be created.</li>\n   *\n   * <li>If you set override to false your object will completely replace the dash.js object.\n   * (Note: This is how it was in 1.x of Dash.js with Dijon).</li>\n   * </ol>\n   * <b>When you extend you get access to this.context, this.factory and this.parent to operate with in your custom object.</b>\n   * <ul>\n   * <li><b>this.context</b> - can be used to pass context for singleton access.</li>\n   * <li><b>this.factory</b> - can be used to call factory.getSingletonInstance().</li>\n   * <li><b>this.parent</b> - is the reference of the parent object to call other public methods. (this.parent is excluded if you extend with override set to false or option 2)</li>\n   * </ul>\n   * <b>You must call extend before you call initialize</b>\n   * @see {@link module:MediaPlayer#initialize initialize()}\n   * @param {string} parentNameString - name of parent module\n   * @param {Object} childInstance - overriding object\n   * @param {boolean} override - replace only some methods (true) or the whole object (false)\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        66814,
        66955
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1898,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002857",
        "name": "extend",
        "type": "FunctionDeclaration",
        "paramnames": [
          "parentNameString",
          "childInstance",
          "override"
        ]
      }
    },
    "description": "This method should be used to extend or replace internal dash.js objects.\nThere are two ways to extend dash.js (determined by the override argument):\n<ol>\n<li>If you set override to true any public method or property in your custom object will\noverride the dash.js parent object's property(ies) and will be used instead but the\ndash.js parent module will still be created.</li>\n\n<li>If you set override to false your object will completely replace the dash.js object.\n(Note: This is how it was in 1.x of Dash.js with Dijon).</li>\n</ol>\n<b>When you extend you get access to this.context, this.factory and this.parent to operate with in your custom object.</b>\n<ul>\n<li><b>this.context</b> - can be used to pass context for singleton access.</li>\n<li><b>this.factory</b> - can be used to call factory.getSingletonInstance().</li>\n<li><b>this.parent</b> - is the reference of the parent object to call other public methods. (this.parent is excluded if you extend with override set to false or option 2)</li>\n</ul>\n<b>You must call extend before you call initialize</b>",
    "see": [
      "{@link module:MediaPlayer#initialize initialize()}"
    ],
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of parent module",
        "name": "parentNameString"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "overriding object",
        "name": "childInstance"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "replace only some methods (true) or the whole object (false)",
        "name": "override"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "extend",
    "longname": "module:MediaPlayer#extend",
    "kind": "function"
  },
  {
    "comment": "/**\n   * This method returns the active stream\n   *\n   * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        67217,
        67472
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 1909,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100002872",
        "name": "getActiveStream",
        "type": "FunctionDeclaration",
        "paramnames": []
      },
      "vars": {
        "streamInfo": "module:MediaPlayer#getActiveStream~streamInfo"
      }
    },
    "description": "This method returns the active stream",
    "exceptions": [
      {
        "description": "{@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function"
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getActiveStream",
    "longname": "module:MediaPlayer#getActiveStream",
    "kind": "function",
    "params": []
  },
  {
    "comment": "/**\n   * Returns the DashAdapter.js Module.\n   *\n   * @see {@link module:DashAdapter}\n   * @returns {Object}\n   * @memberof module:MediaPlayer\n   * @instance\n   */",
    "meta": {
      "range": [
        76443,
        76494
      ],
      "filename": "pbqktg27ntdq4mpm4peab.js",
      "lineno": 2220,
      "columnno": 2,
      "path": "/tmp",
      "code": {
        "id": "astnode100003653",
        "name": "getDashAdapter",
        "type": "FunctionDeclaration",
        "paramnames": []
      }
    },
    "description": "Returns the DashAdapter.js Module.",
    "see": [
      "{@link module:DashAdapter}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "memberof": "module:MediaPlayer",
    "scope": "instance",
    "name": "getDashAdapter",
    "longname": "module:MediaPlayer#getDashAdapter",
    "kind": "function",
    "params": []
  },
  {
    "kind": "package",
    "longname": "package:undefined",
    "files": [
      "/tmp/pbqktg27ntdq4mpm4peab.js"
    ]
  }
]